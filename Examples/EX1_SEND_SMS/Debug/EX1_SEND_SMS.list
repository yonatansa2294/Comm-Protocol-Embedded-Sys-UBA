
EX1_SEND_SMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003780  08003780  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003788  08003788  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003788  08003788  00013788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08003790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200000c4  08003854  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003854  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0f9  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c87  00000000  00000000  0002a1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0002be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002c6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e98  00000000  00000000  0002ce70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af33  00000000  00000000  00042d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c8a  00000000  00000000  0004dc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d48c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002400  00000000  00000000  000d4918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003574 	.word	0x08003574

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	08003574 	.word	0x08003574

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <debounceFSM_init>:
  * @brief  Initializes the FSM with the initial state of the button and delay for anti-rebound
  * @param  None
  * @retval None
  */
void debounceFSM_init()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	fsmButtonState = BUTTON_UP;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <debounceFSM_init+0x1c>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	delayInit(&delayNbLED,DEBOUNCE_DELAY);	//initialize structure to implement a delay of 40ms
 800059e:	2128      	movs	r1, #40	; 0x28
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <debounceFSM_init+0x20>)
 80005a2:	f000 f8ae 	bl	8000702 <delayInit>
	BSP_LED_Init(LED_USER);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 f8f2 	bl	8000790 <BSP_LED_Init>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000e0 	.word	0x200000e0
 80005b4:	200000e4 	.word	0x200000e4

080005b8 <debounceFSM_update>:
  * by triggering events buttonPressed y buttonReleased
  * @param  None
  * @retval None
  */
void debounceFSM_update()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	switch (fsmButtonState)
 80005bc:	4b33      	ldr	r3, [pc, #204]	; (800068c <debounceFSM_update+0xd4>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d857      	bhi.n	8000674 <debounceFSM_update+0xbc>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <debounceFSM_update+0x14>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005dd 	.word	0x080005dd
 80005d0:	080005f7 	.word	0x080005f7
 80005d4:	08000629 	.word	0x08000629
 80005d8:	08000643 	.word	0x08000643
	{
		case BUTTON_UP:	//initial state
			if(!BSP_PB_GetState(BUTTON_USER))
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 f98f 	bl	8000900 <BSP_PB_GetState>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d148      	bne.n	800067a <debounceFSM_update+0xc2>
			{
				fsmButtonState = BUTTON_FALLING;	//falling edge detected
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <debounceFSM_update+0xd4>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
				delayRead(&delayNbLED);				//initialize delay
 80005ee:	4828      	ldr	r0, [pc, #160]	; (8000690 <debounceFSM_update+0xd8>)
 80005f0:	f000 f8a3 	bl	800073a <delayRead>
			}
			break;
 80005f4:	e041      	b.n	800067a <debounceFSM_update+0xc2>

		case BUTTON_FALLING:
			if(delayRead(&delayNbLED))	// check if the anti-rebound delay has expired
 80005f6:	4826      	ldr	r0, [pc, #152]	; (8000690 <debounceFSM_update+0xd8>)
 80005f8:	f000 f89f 	bl	800073a <delayRead>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d03d      	beq.n	800067e <debounceFSM_update+0xc6>
			{
				if(!BSP_PB_GetState(BUTTON_USER))	//new reading to check if the button was pressed
 8000602:	2000      	movs	r0, #0
 8000604:	f000 f97c 	bl	8000900 <BSP_PB_GetState>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d108      	bne.n	8000620 <debounceFSM_update+0x68>
				{
					fsmButtonState = BUTTON_DOWN;
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <debounceFSM_update+0xd4>)
 8000610:	2202      	movs	r2, #2
 8000612:	701a      	strb	r2, [r3, #0]
					flagFallingEdge = true;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <debounceFSM_update+0xdc>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
					buttonPressed();	//valid button press -> call to button pressed event
 800061a:	f000 f83f 	bl	800069c <buttonPressed>
				}
				else
					fsmButtonState = BUTTON_UP;	// button is not pressed, return to initial state
			}
			break;
 800061e:	e02e      	b.n	800067e <debounceFSM_update+0xc6>
					fsmButtonState = BUTTON_UP;	// button is not pressed, return to initial state
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <debounceFSM_update+0xd4>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
			break;
 8000626:	e02a      	b.n	800067e <debounceFSM_update+0xc6>

		case BUTTON_DOWN:
			if(BSP_PB_GetState(BUTTON_USER))
 8000628:	2000      	movs	r0, #0
 800062a:	f000 f969 	bl	8000900 <BSP_PB_GetState>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d026      	beq.n	8000682 <debounceFSM_update+0xca>
			{
				fsmButtonState = BUTTON_RAISING;	//rising edge detected
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <debounceFSM_update+0xd4>)
 8000636:	2203      	movs	r2, #3
 8000638:	701a      	strb	r2, [r3, #0]
				delayRead(&delayNbLED);				//initialize delay
 800063a:	4815      	ldr	r0, [pc, #84]	; (8000690 <debounceFSM_update+0xd8>)
 800063c:	f000 f87d 	bl	800073a <delayRead>
			}
			break;
 8000640:	e01f      	b.n	8000682 <debounceFSM_update+0xca>

		case BUTTON_RAISING:
			if(delayRead(&delayNbLED))	// check if the anti-rebound delay has expired
 8000642:	4813      	ldr	r0, [pc, #76]	; (8000690 <debounceFSM_update+0xd8>)
 8000644:	f000 f879 	bl	800073a <delayRead>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d01b      	beq.n	8000686 <debounceFSM_update+0xce>
			{
				if(BSP_PB_GetState(BUTTON_USER))	//new reading to check if the button is not pressed
 800064e:	2000      	movs	r0, #0
 8000650:	f000 f956 	bl	8000900 <BSP_PB_GetState>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d008      	beq.n	800066c <debounceFSM_update+0xb4>
				{
					fsmButtonState = BUTTON_UP;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <debounceFSM_update+0xd4>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
					flagRaisingEdge = true;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <debounceFSM_update+0xe0>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
					buttonReleased();	//valid button released -> call to button released event
 8000666:	f000 f825 	bl	80006b4 <buttonReleased>
				}
				else
					fsmButtonState = BUTTON_DOWN; // button still pressed, return to button down state
			}
			break;
 800066a:	e00c      	b.n	8000686 <debounceFSM_update+0xce>
					fsmButtonState = BUTTON_DOWN; // button still pressed, return to button down state
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <debounceFSM_update+0xd4>)
 800066e:	2202      	movs	r2, #2
 8000670:	701a      	strb	r2, [r3, #0]
			break;
 8000672:	e008      	b.n	8000686 <debounceFSM_update+0xce>

		default:
			errorFSM();
 8000674:	f000 f83e 	bl	80006f4 <errorFSM>
			break;
 8000678:	e006      	b.n	8000688 <debounceFSM_update+0xd0>
			break;
 800067a:	bf00      	nop
 800067c:	e004      	b.n	8000688 <debounceFSM_update+0xd0>
			break;
 800067e:	bf00      	nop
 8000680:	e002      	b.n	8000688 <debounceFSM_update+0xd0>
			break;
 8000682:	bf00      	nop
 8000684:	e000      	b.n	8000688 <debounceFSM_update+0xd0>
			break;
 8000686:	bf00      	nop
	}
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000e0 	.word	0x200000e0
 8000690:	200000e4 	.word	0x200000e4
 8000694:	200000e2 	.word	0x200000e2
 8000698:	200000e3 	.word	0x200000e3

0800069c <buttonPressed>:
  * @brief  Event generated when validating that the button is pressed.
  * @param  None
  * @retval None
  */
void buttonPressed()
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	keyPressed = true;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <buttonPressed+0x14>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	200000e1 	.word	0x200000e1

080006b4 <buttonReleased>:
  * @brief  Event generated when validating that the button is no longer pressed.
  * @param  None
  * @retval None
  */
void buttonReleased()
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <readKey>:
  * @brief  Function for return state of Key
  * @param  None
  * @retval True: If key is pressed or False: If key is not pressed
  */
bool_t readKey()
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
	bool_t keyPressedAux = false;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]

	if(keyPressed)
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <readKey+0x2c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d004      	beq.n	80006e0 <readKey+0x1c>
	{
		keyPressedAux = true;
 80006d6:	2301      	movs	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
		keyPressed = false;
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <readKey+0x2c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
	}

	return keyPressedAux;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	200000e1 	.word	0x200000e1

080006f4 <errorFSM>:
  * @brief  Function for turn on LED_USER if an error occurs in FSM
  * @param  None
  * @retval NOne
  */
void errorFSM()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	BSP_LED_On(LED_USER);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 f881 	bl	8000800 <BSP_LED_On>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}

08000702 <delayInit>:
 *
 * Note: This function does not initialize the delay count.
 *
 * -------------------------------------------------------------------------------------------------------*/
void delayInit( delay_t * delay, tick_t duration )
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	6039      	str	r1, [r7, #0]
	/*------------------------------- verification of parameters -------------------------*/
	if(duration > MAX_DELAY)	//check if the delay value is higher than the allowed value
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000712:	4293      	cmp	r3, r2
 8000714:	d902      	bls.n	800071c <delayInit+0x1a>
		duration = MAX_DELAY;
 8000716:	f247 5330 	movw	r3, #30000	; 0x7530
 800071a:	603b      	str	r3, [r7, #0]

	if(delay != NULL)			//verify if the address of the structure is valid
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d005      	beq.n	800072e <delayInit+0x2c>
	{
		delay->running = false; 	// Initialize flag running
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	721a      	strb	r2, [r3, #8]
		delay->duration = duration;	// Load the initial value of the delay
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	605a      	str	r2, [r3, #4]
	}
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <delayRead>:
 *
 * Note: When the time is expired, the running flag is changed to false.
 *
 * -------------------------------------------------------------------------------------------------------*/
bool_t delayRead( delay_t * delay )
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b084      	sub	sp, #16
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	bool toggleLed = false;	//flag to indicated when the led is to be toggle
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]

	/*-------- check flag status to start delay calculation -------*/
	if(delay->running == false)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7a1b      	ldrb	r3, [r3, #8]
 800074a:	f083 0301 	eor.w	r3, r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d008      	beq.n	8000766 <delayRead+0x2c>
	{
		delay->startTime = HAL_GetTick();	//initial timestamp
 8000754:	f000 fc30 	bl	8000fb8 <HAL_GetTick>
 8000758:	4602      	mov	r2, r0
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	601a      	str	r2, [r3, #0]
		delay->running = true;				// update flag running
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2201      	movs	r2, #1
 8000762:	721a      	strb	r2, [r3, #8]
 8000764:	e00e      	b.n	8000784 <delayRead+0x4a>
	}
	else
	{
		/*------------- check if the delay duration has been met ----------*/
		if((HAL_GetTick()-delay->startTime)>= delay->duration)
 8000766:	f000 fc27 	bl	8000fb8 <HAL_GetTick>
 800076a:	4602      	mov	r2, r0
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	1ad2      	subs	r2, r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	429a      	cmp	r2, r3
 8000778:	d304      	bcc.n	8000784 <delayRead+0x4a>
		{
			delay->running = false;	//reset flag of start
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	721a      	strb	r2, [r3, #8]
			toggleLed = true;	//returns true if the time has expired
 8000780:	2301      	movs	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
		}
	}

	return toggleLed;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <BSP_LED_Init>:
GPIO_TypeDef* BUTTON_PORT[BUTTONn] = {KEY_BUTTON_GPIO_PORT};
const uint16_t BUTTON_PIN[BUTTONn] = {KEY_BUTTON_PIN};
const uint8_t BUTTON_IRQn[BUTTONn] = {KEY_BUTTON_EXTI_IRQn};

void BSP_LED_Init(Led_TypeDef Led)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LED_USER_GPIO_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <BSP_LED_Init+0x68>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <BSP_LED_Init+0x68>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <BSP_LED_Init+0x68>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO pin : USER_LED_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80007b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <BSP_LED_Init+0x6c>)
 80007cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d0:	f107 020c 	add.w	r2, r7, #12
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 fd30 	bl	800123c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <BSP_LED_Init+0x6c>)
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e8:	2201      	movs	r2, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fec2 	bl	8001574 <HAL_GPIO_WritePin>
}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	20000000 	.word	0x20000000

08000800 <BSP_LED_On>:
	gpio_init_structure.Pin = GPIO_PIN[Led];
	HAL_GPIO_DeInit(GPIO_PORT[Led], gpio_init_structure.Pin);
}

void BSP_LED_On(Led_TypeDef Led)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <BSP_LED_On+0x28>)
 800080e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000816:	2200      	movs	r2, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f000 feab 	bl	8001574 <HAL_GPIO_WritePin>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000000 	.word	0x20000000

0800082c <BSP_LED_Toggle>:
{
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
}

void BSP_LED_Toggle(Led_TypeDef Led)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <BSP_LED_Toggle+0x28>)
 800083a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f000 feae 	bl	80015a6 <HAL_GPIO_TogglePin>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000000 	.word	0x20000000

08000858 <BSP_PB_Init>:

void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the BUTTON Clock */
	KEY_BUTTON_GPIO_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <BSP_PB_Init+0xa0>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <BSP_PB_Init+0xa0>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6313      	str	r3, [r2, #48]	; 0x30
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <BSP_PB_Init+0xa0>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]

	if(ButtonMode == BUTTON_MODE_GPIO)
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d111      	bne.n	80008ae <BSP_PB_Init+0x56>
	{
	/* Configure Button pin as input */
	GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800088a:	2301      	movs	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4a17      	ldr	r2, [pc, #92]	; (80008fc <BSP_PB_Init+0xa4>)
 800089e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a2:	f107 020c 	add.w	r2, r7, #12
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fcc7 	bl	800123c <HAL_GPIO_Init>
	}

	if(ButtonMode == BUTTON_MODE_EXTI)
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d11c      	bne.n	80008ee <BSP_PB_Init+0x96>
	{
	/* Configure Button pin as input with External interrupt */
	GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80008b4:	2301      	movs	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008c0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <BSP_PB_Init+0xa4>)
 80008c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ca:	f107 020c 	add.w	r2, r7, #12
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fcb3 	bl	800123c <HAL_GPIO_Init>

	/* Enable and set Button EXTI Interrupt to the lowest priority */
	HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80008d6:	2306      	movs	r3, #6
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	2200      	movs	r2, #0
 80008dc:	210f      	movs	r1, #15
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fc75 	bl	80011ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80008e4:	2306      	movs	r3, #6
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fc8c 	bl	8001206 <HAL_NVIC_EnableIRQ>
	}
}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	20000004 	.word	0x20000004

08000900 <BSP_PB_GetState>:
	HAL_NVIC_DisableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
	HAL_GPIO_DeInit(BUTTON_PORT[Button], gpio_init_structure.Pin);
}

uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <BSP_PB_GetState+0x28>)
 800090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000912:	2201      	movs	r2, #1
 8000914:	4611      	mov	r1, r2
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fe14 	bl	8001544 <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000004 	.word	0x20000004

0800092c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <SystemInit+0x20>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <SystemInit+0x20>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 faf8 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ac:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <_sbrk+0x5c>)
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <_sbrk+0x60>)
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <_sbrk+0x64>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <_sbrk+0x68>)
 80009c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d207      	bcs.n	80009e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d4:	f002 f918 	bl	8002c08 <__errno>
 80009d8:	4603      	mov	r3, r0
 80009da:	220c      	movs	r2, #12
 80009dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	e009      	b.n	80009f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <_sbrk+0x64>)
 80009f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f6:	68fb      	ldr	r3, [r7, #12]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20020000 	.word	0x20020000
 8000a04:	00000400 	.word	0x00000400
 8000a08:	200000f0 	.word	0x200000f0
 8000a0c:	20000288 	.word	0x20000288

08000a10 <SIM800_Default_ConfigHW>:
 * @note	The UART1 is used by default.
 * @param	Pointer to structure UART_HandleTypeDef
 * @retval	Integer Value: OK(0) - ERROR(1)
 */
uint8_t SIM800_Default_ConfigHW()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	uint8_t statusConfigSIM = ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	71fb      	strb	r3, [r7, #7]

	if(config_Default_SIM() == SUCCESSFUL)
 8000a1a:	f000 f95d 	bl	8000cd8 <config_Default_SIM>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SIM800_Default_ConfigHW+0x18>
		statusConfigSIM = OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	71fb      	strb	r3, [r7, #7]

	return statusConfigSIM;
 8000a28:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <SIM800_Init>:
 * 			2. AT+CMGF=1	-	Set the message system to text mode
 * @param	None
 * @retval Integer Value: OK(0) - ERROR(1)
 */
uint8_t SIM800_Init()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	uint8_t iterTest;
	uint8_t counterOK = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	71bb      	strb	r3, [r7, #6]
	uint8_t statusInit;
	uint8_t nTimesAT = 5;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	713b      	strb	r3, [r7, #4]

	memset(&serialResponseBuffer, 0,SERIAL_RESPONSE_BUFFER_SIZE);
 8000a42:	2264      	movs	r2, #100	; 0x64
 8000a44:	2100      	movs	r1, #0
 8000a46:	4827      	ldr	r0, [pc, #156]	; (8000ae4 <SIM800_Init+0xb0>)
 8000a48:	f002 f908 	bl	8002c5c <memset>
	/* Auto-bauding routine
	 * To allow the baud rate to be synchronized, simply issue an "AT" string.
	 * In this case we send 5 times "AT" and check if the SIM response is OK.
	 * In case we get at least 4 correct answers, we validate the communication successfully.
	 * */
	for(iterTest = 0; iterTest < nTimesAT; iterTest++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	e015      	b.n	8000a7e <SIM800_Init+0x4a>
	{
		send_Test_Read_AT_CMD((uint8_t *)AT_CHECK_COMM);
 8000a52:	4825      	ldr	r0, [pc, #148]	; (8000ae8 <SIM800_Init+0xb4>)
 8000a54:	f000 f854 	bl	8000b00 <send_Test_Read_AT_CMD>
		read_Response_SIM(&serialResponseBuffer);
 8000a58:	4822      	ldr	r0, [pc, #136]	; (8000ae4 <SIM800_Init+0xb0>)
 8000a5a:	f000 f907 	bl	8000c6c <read_Response_SIM>

		if(strstr((char *)serialResponseBuffer,(char *)OK_RESPONSE))
 8000a5e:	4923      	ldr	r1, [pc, #140]	; (8000aec <SIM800_Init+0xb8>)
 8000a60:	4820      	ldr	r0, [pc, #128]	; (8000ae4 <SIM800_Init+0xb0>)
 8000a62:	f002 f923 	bl	8002cac <strstr>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <SIM800_Init+0x3e>
			counterOK++;
 8000a6c:	79bb      	ldrb	r3, [r7, #6]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(100);
 8000a72:	2064      	movs	r0, #100	; 0x64
 8000a74:	f000 faac 	bl	8000fd0 <HAL_Delay>
	for(iterTest = 0; iterTest < nTimesAT; iterTest++)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	793b      	ldrb	r3, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d3e5      	bcc.n	8000a52 <SIM800_Init+0x1e>
	}

	if(counterOK >= nTimesAT-1)
 8000a86:	79ba      	ldrb	r2, [r7, #6]
 8000a88:	793b      	ldrb	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	db21      	blt.n	8000ad4 <SIM800_Init+0xa0>
	{
		send_Write_Execution_AT_CMD((uint8_t *)AT_CMD_TEXT_MODE,(uint8_t *)TEXT_MODE);
 8000a90:	4917      	ldr	r1, [pc, #92]	; (8000af0 <SIM800_Init+0xbc>)
 8000a92:	4818      	ldr	r0, [pc, #96]	; (8000af4 <SIM800_Init+0xc0>)
 8000a94:	f000 f844 	bl	8000b20 <send_Write_Execution_AT_CMD>
		read_Response_SIM(&serialResponseBuffer);
 8000a98:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <SIM800_Init+0xb0>)
 8000a9a:	f000 f8e7 	bl	8000c6c <read_Response_SIM>

		if(strstr((char *)serialResponseBuffer,(char *)OK_RESPONSE))
 8000a9e:	4913      	ldr	r1, [pc, #76]	; (8000aec <SIM800_Init+0xb8>)
 8000aa0:	4810      	ldr	r0, [pc, #64]	; (8000ae4 <SIM800_Init+0xb0>)
 8000aa2:	f002 f903 	bl	8002cac <strstr>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d015      	beq.n	8000ad8 <SIM800_Init+0xa4>
		{
			send_Write_Execution_AT_CMD((uint8_t *)AT_CMD_CONFIG_BAUD,(uint8_t *)DEFAULT_BAUD_RATE_SIM);
 8000aac:	4912      	ldr	r1, [pc, #72]	; (8000af8 <SIM800_Init+0xc4>)
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <SIM800_Init+0xc8>)
 8000ab0:	f000 f836 	bl	8000b20 <send_Write_Execution_AT_CMD>
			read_Response_SIM(&serialResponseBuffer);
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <SIM800_Init+0xb0>)
 8000ab6:	f000 f8d9 	bl	8000c6c <read_Response_SIM>

			if(strstr((char *)serialResponseBuffer,(char *)OK_RESPONSE))
 8000aba:	490c      	ldr	r1, [pc, #48]	; (8000aec <SIM800_Init+0xb8>)
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <SIM800_Init+0xb0>)
 8000abe:	f002 f8f5 	bl	8002cac <strstr>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <SIM800_Init+0x9a>
				statusInit = OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	717b      	strb	r3, [r7, #5]
 8000acc:	e004      	b.n	8000ad8 <SIM800_Init+0xa4>
			else
				statusInit = ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	717b      	strb	r3, [r7, #5]
 8000ad2:	e001      	b.n	8000ad8 <SIM800_Init+0xa4>
		}
	}
	else
		statusInit = ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	717b      	strb	r3, [r7, #5]

	return statusInit;
 8000ad8:	797b      	ldrb	r3, [r7, #5]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000f4 	.word	0x200000f4
 8000ae8:	0800358c 	.word	0x0800358c
 8000aec:	08003590 	.word	0x08003590
 8000af0:	08003594 	.word	0x08003594
 8000af4:	08003598 	.word	0x08003598
 8000af8:	080035a0 	.word	0x080035a0
 8000afc:	080035a8 	.word	0x080035a8

08000b00 <send_Test_Read_AT_CMD>:
 * 			Command format: AT+<command>=? or AT+<command>?
 * @param	Pointer of type uint8_t containing the AT command
 * @retval 	None
 */
static void send_Test_Read_AT_CMD( uint8_t* command)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
    write_Data_UART(command);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 f9c3 	bl	8000e94 <write_Data_UART>
    write_Data_UART((uint8_t *)"\r");
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <send_Test_Read_AT_CMD+0x1c>)
 8000b10:	f000 f9c0 	bl	8000e94 <write_Data_UART>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	080035ac 	.word	0x080035ac

08000b20 <send_Write_Execution_AT_CMD>:
 * @param	Pointer of type uint8_t containing the AT command
 * @param	Pointer of type uint8_t containing the parameter.
 * @retval	None
 */
static void send_Write_Execution_AT_CMD( uint8_t* command, uint8_t* value)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
	write_Data_UART((uint8_t *)"AT+");
 8000b2a:	4809      	ldr	r0, [pc, #36]	; (8000b50 <send_Write_Execution_AT_CMD+0x30>)
 8000b2c:	f000 f9b2 	bl	8000e94 <write_Data_UART>
	write_Data_UART((uint8_t *)command);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f9af 	bl	8000e94 <write_Data_UART>
	write_Data_UART((uint8_t *)"=");
 8000b36:	4807      	ldr	r0, [pc, #28]	; (8000b54 <send_Write_Execution_AT_CMD+0x34>)
 8000b38:	f000 f9ac 	bl	8000e94 <write_Data_UART>
	write_Data_UART((uint8_t *)value);
 8000b3c:	6838      	ldr	r0, [r7, #0]
 8000b3e:	f000 f9a9 	bl	8000e94 <write_Data_UART>
	write_Data_UART((uint8_t *)"\r");
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <send_Write_Execution_AT_CMD+0x38>)
 8000b44:	f000 f9a6 	bl	8000e94 <write_Data_UART>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	080035b0 	.word	0x080035b0
 8000b54:	080035b4 	.word	0x080035b4
 8000b58:	080035ac 	.word	0x080035ac

08000b5c <check_Network_Registration>:
 * @retval	Integer Value:
 * 			OK(0) - SIM is registered in the network.
 * 			ERROR(1) - SIM is not registered in the network.
 */
uint8_t check_Network_Registration(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
	uint8_t statusReg = ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	71fb      	strb	r3, [r7, #7]

	memset(&serialResponseBuffer,0,SERIAL_RESPONSE_BUFFER_SIZE);
 8000b66:	2264      	movs	r2, #100	; 0x64
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480b      	ldr	r0, [pc, #44]	; (8000b98 <check_Network_Registration+0x3c>)
 8000b6c:	f002 f876 	bl	8002c5c <memset>

	send_Test_Read_AT_CMD((uint8_t*)AT_CMD_NETWORK_REGISTER);
 8000b70:	480a      	ldr	r0, [pc, #40]	; (8000b9c <check_Network_Registration+0x40>)
 8000b72:	f7ff ffc5 	bl	8000b00 <send_Test_Read_AT_CMD>
    read_Response_SIM(&serialResponseBuffer);
 8000b76:	4808      	ldr	r0, [pc, #32]	; (8000b98 <check_Network_Registration+0x3c>)
 8000b78:	f000 f878 	bl	8000c6c <read_Response_SIM>

    if(strstr((char *)serialResponseBuffer,(char *)NETWORK_REGISTERED))
 8000b7c:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <check_Network_Registration+0x44>)
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <check_Network_Registration+0x3c>)
 8000b80:	f002 f894 	bl	8002cac <strstr>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <check_Network_Registration+0x32>
    	statusReg = OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]

    return statusReg;
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000f4 	.word	0x200000f4
 8000b9c:	080035b8 	.word	0x080035b8
 8000ba0:	080035c4 	.word	0x080035c4

08000ba4 <send_SMS>:
 * @retval	Integer Value:
 * 			OK(0) - Message sent
 * 			ERROR(1) - Message not sent
 */
uint8_t send_SMS(uint8_t *cellNumber, uint8_t *message)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
    uint8_t statusSendSMS;
    uint8_t formatCellNumber[LEN_FORMAT_CELL_NUMBER];
    uint8_t ctrlz[2];

	if((cellNumber != NULL) && (message != NULL))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d049      	beq.n	8000c48 <send_SMS+0xa4>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d046      	beq.n	8000c48 <send_SMS+0xa4>
	{
        memset(&serialResponseBuffer,0,SERIAL_RESPONSE_BUFFER_SIZE);
 8000bba:	2264      	movs	r2, #100	; 0x64
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4826      	ldr	r0, [pc, #152]	; (8000c58 <send_SMS+0xb4>)
 8000bc0:	f002 f84c 	bl	8002c5c <memset>

        /* Format the number to add quotation marks: "++xxxxxxxxxxxx" */
		sprintf((char *)formatCellNumber,"\"%*s\"",sizeof(cellNumber),cellNumber);
 8000bc4:	f107 000c 	add.w	r0, r7, #12
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2204      	movs	r2, #4
 8000bcc:	4923      	ldr	r1, [pc, #140]	; (8000c5c <send_SMS+0xb8>)
 8000bce:	f002 f84d 	bl	8002c6c <siprintf>
		send_Write_Execution_AT_CMD((uint8_t *)AT_CMD_SEND_SMS,formatCellNumber);
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4821      	ldr	r0, [pc, #132]	; (8000c60 <send_SMS+0xbc>)
 8000bda:	f7ff ffa1 	bl	8000b20 <send_Write_Execution_AT_CMD>
        read_Response_SIM(&serialResponseBuffer);
 8000bde:	481e      	ldr	r0, [pc, #120]	; (8000c58 <send_SMS+0xb4>)
 8000be0:	f000 f844 	bl	8000c6c <read_Response_SIM>

        /* Checks if the sim returned the '>' character to enter the text to be sent */
        if(strstr((char *)serialResponseBuffer,(char *)INPUT_DATA))
 8000be4:	213e      	movs	r1, #62	; 0x3e
 8000be6:	481c      	ldr	r0, [pc, #112]	; (8000c58 <send_SMS+0xb4>)
 8000be8:	f002 f860 	bl	8002cac <strstr>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d027      	beq.n	8000c42 <send_SMS+0x9e>
        {
        	memset(&serialResponseBuffer,0,SERIAL_RESPONSE_BUFFER_SIZE);
 8000bf2:	2264      	movs	r2, #100	; 0x64
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4818      	ldr	r0, [pc, #96]	; (8000c58 <send_SMS+0xb4>)
 8000bf8:	f002 f830 	bl	8002c5c <memset>

        	/* Enter the text and send with the ASCII character CTRLZ(0x1A)*/
        	write_Data_UART((uint8_t *)message);
 8000bfc:	6838      	ldr	r0, [r7, #0]
 8000bfe:	f000 f949 	bl	8000e94 <write_Data_UART>
        	HAL_Delay(300);
 8000c02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c06:	f000 f9e3 	bl	8000fd0 <HAL_Delay>
        	sprintf((char *)ctrlz,"%c",CTRL_Z);
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	221a      	movs	r2, #26
 8000c10:	4914      	ldr	r1, [pc, #80]	; (8000c64 <send_SMS+0xc0>)
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 f82a 	bl	8002c6c <siprintf>
        	write_Data_UART(ctrlz);
 8000c18:	f107 0308 	add.w	r3, r7, #8
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f939 	bl	8000e94 <write_Data_UART>

        	/* Verify the SIM response to validate the sending of the message */
        	read_Response_SIM(&serialResponseBuffer);
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <send_SMS+0xb4>)
 8000c24:	f000 f822 	bl	8000c6c <read_Response_SIM>
        	if(strstr((char *)serialResponseBuffer,(char *)OK_RESPONSE))
 8000c28:	490f      	ldr	r1, [pc, #60]	; (8000c68 <send_SMS+0xc4>)
 8000c2a:	480b      	ldr	r0, [pc, #44]	; (8000c58 <send_SMS+0xb4>)
 8000c2c:	f002 f83e 	bl	8002cac <strstr>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d002      	beq.n	8000c3c <send_SMS+0x98>
        		statusSendSMS = OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	77fb      	strb	r3, [r7, #31]
        if(strstr((char *)serialResponseBuffer,(char *)INPUT_DATA))
 8000c3a:	e007      	b.n	8000c4c <send_SMS+0xa8>
			else
				statusSendSMS = ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	77fb      	strb	r3, [r7, #31]
        if(strstr((char *)serialResponseBuffer,(char *)INPUT_DATA))
 8000c40:	e004      	b.n	8000c4c <send_SMS+0xa8>
        }
        else
        	statusSendSMS = ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	77fb      	strb	r3, [r7, #31]
        if(strstr((char *)serialResponseBuffer,(char *)INPUT_DATA))
 8000c46:	e001      	b.n	8000c4c <send_SMS+0xa8>
    }
	else
		statusSendSMS = ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	77fb      	strb	r3, [r7, #31]

	return statusSendSMS;
 8000c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3720      	adds	r7, #32
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000f4 	.word	0x200000f4
 8000c5c:	080035c8 	.word	0x080035c8
 8000c60:	080035d0 	.word	0x080035d0
 8000c64:	080035d8 	.word	0x080035d8
 8000c68:	08003590 	.word	0x08003590

08000c6c <read_Response_SIM>:
 * @note	The reading is done by polling.
 * @param	Pointer to the buffer of type uint8_t where the SIM response is stored.
 * @retval	None
 */
static void read_Response_SIM(uint8_t *pBuffer)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint8_t data[1];

  do
  {
	  /* Get a character from the USART and save Buffer*/
	  data[0] = read_Data_UART();
 8000c74:	f000 f928 	bl	8000ec8 <read_Data_UART>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	733b      	strb	r3, [r7, #12]
	  *pBuffer = data[0];
 8000c7c:	7b3a      	ldrb	r2, [r7, #12]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	701a      	strb	r2, [r3, #0]

	  /*Verify if the SIM response is the character for data entry*/
	  if (*pBuffer == (uint8_t)INPUT_DATA)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b3e      	cmp	r3, #62	; 0x3e
 8000c88:	d019      	beq.n	8000cbe <read_Response_SIM+0x52>

	  /**
	   * Commands are usually followed by a response that includes <CR><LF><response><CR><LF>.
	   * In this case check if the response is OK.
	   * */
	  else if((*pBuffer == 'K') && (*(pBuffer - 1) == 'O'))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b4b      	cmp	r3, #75	; 0x4b
 8000c90:	d10f      	bne.n	8000cb2 <read_Response_SIM+0x46>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b4f      	cmp	r3, #79	; 0x4f
 8000c9a:	d10a      	bne.n	8000cb2 <read_Response_SIM+0x46>
	  {
		  /* This sequence is used to read the last <CR><LF> without buffering them */
		  ++pBuffer;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	607b      	str	r3, [r7, #4]
		  read_Data_UART();
 8000ca2:	f000 f911 	bl	8000ec8 <read_Data_UART>

		  ++pBuffer;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
		  read_Data_UART();
 8000cac:	f000 f90c 	bl	8000ec8 <read_Data_UART>

		  break;
 8000cb0:	e006      	b.n	8000cc0 <read_Response_SIM+0x54>
	  }

  }while(pBuffer++);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1db      	bne.n	8000c74 <read_Response_SIM+0x8>

}
 8000cbc:	e000      	b.n	8000cc0 <read_Response_SIM+0x54>
		  break;
 8000cbe:	bf00      	nop
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <SIM800_On>:
 * @brief	Turn on SIM.
 * @param	None.
 * @retval	None.
 */
void SIM800_On()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	exit_Reset_SIM();
 8000ccc:	f000 f8d2 	bl	8000e74 <exit_Reset_SIM>
	power_On_SIM();
 8000cd0:	f000 f8a8 	bl	8000e24 <power_On_SIM>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <config_Default_SIM>:
			This is because some modules do not have the powerKey pin, so we reset the SIM.
 * @param	None.
 * @retval 	Initialization status. If the initialization was successful it returns true, otherwise it returns false.
 */
bool_t config_Default_SIM()
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct={0};
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
	bool_t initStatusHwSIM;

	/* Enable port B clock for powerKey and reset pins */
	DEFAULT_POWERKEY_GPIO_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b43      	ldr	r3, [pc, #268]	; (8000e00 <config_Default_SIM+0x128>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a42      	ldr	r2, [pc, #264]	; (8000e00 <config_Default_SIM+0x128>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <config_Default_SIM+0x128>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
	DEFAULT_RST_GPIO_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b3c      	ldr	r3, [pc, #240]	; (8000e00 <config_Default_SIM+0x128>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a3b      	ldr	r2, [pc, #236]	; (8000e00 <config_Default_SIM+0x128>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <config_Default_SIM+0x128>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

	/* Default pin assignments for reset and powerKey pins */
	_powerKeyPin = DEFAULT_POWERKEY_PIN;
 8000d26:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <config_Default_SIM+0x12c>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	801a      	strh	r2, [r3, #0]
	powerKeyHandlerPort = DEFAULT_POWERKEY_GPIO_PORT;
 8000d2c:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <config_Default_SIM+0x130>)
 8000d2e:	4a37      	ldr	r2, [pc, #220]	; (8000e0c <config_Default_SIM+0x134>)
 8000d30:	601a      	str	r2, [r3, #0]

	_resetPin = DEFAULT_RST_PIN;
 8000d32:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <config_Default_SIM+0x138>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	801a      	strh	r2, [r3, #0]
	resetHandlerPort = DEFAULT_RST_GPIO_PORT;
 8000d38:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <config_Default_SIM+0x13c>)
 8000d3a:	4a34      	ldr	r2, [pc, #208]	; (8000e0c <config_Default_SIM+0x134>)
 8000d3c:	601a      	str	r2, [r3, #0]

	/* Configure GPIO pin : Power Key */
	GPIO_InitStruct.Pin = _powerKeyPin;
 8000d3e:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <config_Default_SIM+0x12c>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(powerKeyHandlerPort, &GPIO_InitStruct);
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <config_Default_SIM+0x130>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f107 0208 	add.w	r2, r7, #8
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fa6e 	bl	800123c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(powerKeyHandlerPort, _powerKeyPin, PWRKEY_OFF);
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <config_Default_SIM+0x130>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <config_Default_SIM+0x12c>)
 8000d66:	8811      	ldrh	r1, [r2, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fc02 	bl	8001574 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Reset */
	GPIO_InitStruct.Pin = _resetPin;
 8000d70:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <config_Default_SIM+0x138>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(resetHandlerPort, &GPIO_InitStruct);
 8000d82:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <config_Default_SIM+0x13c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f107 0208 	add.w	r2, r7, #8
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fa55 	bl	800123c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(resetHandlerPort, _resetPin, RST_ON);
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <config_Default_SIM+0x13c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <config_Default_SIM+0x138>)
 8000d98:	8811      	ldrh	r1, [r2, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fbe9 	bl	8001574 <HAL_GPIO_WritePin>

	/* Configuration parameters for USART1 peripherals */
	UARTHandlerPort.Instance = DEFAULT_USART;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <config_Default_SIM+0x140>)
 8000da4:	4a1d      	ldr	r2, [pc, #116]	; (8000e1c <config_Default_SIM+0x144>)
 8000da6:	601a      	str	r2, [r3, #0]
	UARTHandlerPort.Init.BaudRate = DEFAULT_BAUD_RATE;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <config_Default_SIM+0x140>)
 8000daa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dae:	605a      	str	r2, [r3, #4]
	UARTHandlerPort.Init.WordLength = UART_WORDLENGTH_8B;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <config_Default_SIM+0x140>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
	UARTHandlerPort.Init.StopBits = UART_STOPBITS_1;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <config_Default_SIM+0x140>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
	UARTHandlerPort.Init.Parity = UART_PARITY_NONE;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <config_Default_SIM+0x140>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
	UARTHandlerPort.Init.Mode = UART_MODE_TX_RX;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <config_Default_SIM+0x140>)
 8000dc4:	220c      	movs	r2, #12
 8000dc6:	615a      	str	r2, [r3, #20]
	UARTHandlerPort.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <config_Default_SIM+0x140>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
	UARTHandlerPort.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <config_Default_SIM+0x140>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]

	pUARTHandlerPort = &UARTHandlerPort;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <config_Default_SIM+0x148>)
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <config_Default_SIM+0x140>)
 8000dd8:	601a      	str	r2, [r3, #0]

	/* USART1 initialization with default parameters */
	if (HAL_UART_Init(pUARTHandlerPort) == HAL_OK)
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <config_Default_SIM+0x148>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 f8f8 	bl	8001fd4 <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <config_Default_SIM+0x118>
		initStatusHwSIM = SUCCESSFUL;
 8000dea:	2301      	movs	r3, #1
 8000dec:	77fb      	strb	r3, [r7, #31]
 8000dee:	e001      	b.n	8000df4 <config_Default_SIM+0x11c>
	else
		initStatusHwSIM = UNSUCCESSFUL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	77fb      	strb	r3, [r7, #31]

	return initStatusHwSIM;
 8000df4:	7ffb      	ldrb	r3, [r7, #31]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	200001a8 	.word	0x200001a8
 8000e08:	200001a4 	.word	0x200001a4
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	200001aa 	.word	0x200001aa
 8000e14:	200001a0 	.word	0x200001a0
 8000e18:	20000158 	.word	0x20000158
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	2000019c 	.word	0x2000019c

08000e24 <power_On_SIM>:
 * 				which are not relevant, so we wait for this time.
 * @param	None.
 * @retval 	None.
 */
void power_On_SIM()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(powerKeyHandlerPort, _powerKeyPin, PWRKEY_ON);
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <power_On_SIM+0x44>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <power_On_SIM+0x48>)
 8000e2e:	8811      	ldrh	r1, [r2, #0]
 8000e30:	2201      	movs	r2, #1
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fb9e 	bl	8001574 <HAL_GPIO_WritePin>
	HAL_Delay(DELAY_POWER_ON);
 8000e38:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e3c:	f000 f8c8 	bl	8000fd0 <HAL_Delay>
	HAL_GPIO_WritePin(powerKeyHandlerPort, _powerKeyPin, PWRKEY_OFF);
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <power_On_SIM+0x44>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <power_On_SIM+0x48>)
 8000e46:	8811      	ldrh	r1, [r2, #0]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fb92 	bl	8001574 <HAL_GPIO_WritePin>
	HAL_Delay(DELAY_ENTRY_ACTIVE);
 8000e50:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000e54:	f000 f8bc 	bl	8000fd0 <HAL_Delay>

	/* Initializes the serial receive buffer */
	memset(&serialUARTBuffer,0,sizeof(serialUARTBuffer));
 8000e58:	2232      	movs	r2, #50	; 0x32
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <power_On_SIM+0x4c>)
 8000e5e:	f001 fefd 	bl	8002c5c <memset>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200001a4 	.word	0x200001a4
 8000e6c:	200001a8 	.word	0x200001a8
 8000e70:	200001ac 	.word	0x200001ac

08000e74 <exit_Reset_SIM>:
 * @brief	Releases the SIM from the permanent reset state
 * @param	None.
 * @retval 	None.
 */
void exit_Reset_SIM()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(resetHandlerPort, _resetPin, RST_OFF);
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <exit_Reset_SIM+0x18>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <exit_Reset_SIM+0x1c>)
 8000e7e:	8811      	ldrh	r1, [r2, #0]
 8000e80:	2201      	movs	r2, #1
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fb76 	bl	8001574 <HAL_GPIO_WritePin>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200001a0 	.word	0x200001a0
 8000e90:	200001aa 	.word	0x200001aa

08000e94 <write_Data_UART>:
 * @brief	Sends a string of data over the specified UART peripheral.
 * @param 	Pointer to the data string to be sent.
 * @retval 	None.
 */
void write_Data_UART(uint8_t *pDataTx)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	if(pDataTx!= NULL)	 /**< verifies that the data pointer is valid */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00c      	beq.n	8000ebc <write_Data_UART+0x28>
	{
		/* get the number of characters to send */
		uint16_t dataLength = strlen((const char*)pDataTx);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff f99c 	bl	80001e0 <strlen>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	81fb      	strh	r3, [r7, #14]
		HAL_UART_Transmit(pUARTHandlerPort,pDataTx, dataLength, TIMEOUT);
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <write_Data_UART+0x30>)
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	89fa      	ldrh	r2, [r7, #14]
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f001 f8d9 	bl	800206e <HAL_UART_Transmit>
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000019c 	.word	0x2000019c

08000ec8 <read_Data_UART>:
 * @brief  	Reads a byte over the UART and stores it in the serialUARTBuffer array.
 * @param 	None.
 * @retval 	The first element of the array serialUARTBuffer, containing the data byte read.
 */
uint8_t read_Data_UART()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	HAL_UART_Receive(pUARTHandlerPort,&serialUARTBuffer,1,TIMEOUT);
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <read_Data_UART+0x1c>)
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4904      	ldr	r1, [pc, #16]	; (8000ee8 <read_Data_UART+0x20>)
 8000ed8:	f001 f95b 	bl	8002192 <HAL_UART_Receive>
	return serialUARTBuffer[0];
 8000edc:	4b02      	ldr	r3, [pc, #8]	; (8000ee8 <read_Data_UART+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000019c 	.word	0x2000019c
 8000ee8:	200001ac 	.word	0x200001ac

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_Init+0x40>)
 8000ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_Init+0x40>)
 8000f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_Init+0x40>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 f94f 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f000 f808 	bl	8000f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f000 fb5c 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023c00 	.word	0x40023c00

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f967 	bl	8001222 <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f92f 	bl	80011ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000010 	.word	0x20000010
 8000f8c:	2000000c 	.word	0x2000000c

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000010 	.word	0x20000010
 8000fb4:	200001e0 	.word	0x200001e0

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200001e0 	.word	0x200001e0

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000010 	.word	0x20000010

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff8e 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff29 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff3e 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff8e 	bl	800110c <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5d 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff31 	bl	800107c <__NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffa2 	bl	8001174 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e159      	b.n	800150c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 8148 	bne.w	8001506 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d005      	beq.n	800128e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128a:	2b02      	cmp	r3, #2
 800128c:	d130      	bne.n	80012f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c4:	2201      	movs	r2, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	f003 0201 	and.w	r2, r3, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d017      	beq.n	800132c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d123      	bne.n	8001380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	69b9      	ldr	r1, [r7, #24]
 800137c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a2 	beq.w	8001506 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b57      	ldr	r3, [pc, #348]	; (8001524 <HAL_GPIO_Init+0x2e8>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a56      	ldr	r2, [pc, #344]	; (8001524 <HAL_GPIO_Init+0x2e8>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b54      	ldr	r3, [pc, #336]	; (8001524 <HAL_GPIO_Init+0x2e8>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013de:	4a52      	ldr	r2, [pc, #328]	; (8001528 <HAL_GPIO_Init+0x2ec>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a49      	ldr	r2, [pc, #292]	; (800152c <HAL_GPIO_Init+0x2f0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0x202>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a48      	ldr	r2, [pc, #288]	; (8001530 <HAL_GPIO_Init+0x2f4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x1fe>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a47      	ldr	r2, [pc, #284]	; (8001534 <HAL_GPIO_Init+0x2f8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x1fa>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a46      	ldr	r2, [pc, #280]	; (8001538 <HAL_GPIO_Init+0x2fc>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x1f6>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a45      	ldr	r2, [pc, #276]	; (800153c <HAL_GPIO_Init+0x300>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x1f2>
 800142a:	2304      	movs	r3, #4
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x204>
 800142e:	2307      	movs	r3, #7
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x204>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x204>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x204>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x204>
 800143e:	2300      	movs	r3, #0
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f002 0203 	and.w	r2, r2, #3
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	; (8001528 <HAL_GPIO_Init+0x2ec>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_GPIO_Init+0x304>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a2f      	ldr	r2, [pc, #188]	; (8001540 <HAL_GPIO_Init+0x304>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_GPIO_Init+0x304>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a24      	ldr	r2, [pc, #144]	; (8001540 <HAL_GPIO_Init+0x304>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <HAL_GPIO_Init+0x304>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d6:	4a1a      	ldr	r2, [pc, #104]	; (8001540 <HAL_GPIO_Init+0x304>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_GPIO_Init+0x304>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_GPIO_Init+0x304>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	f67f aea2 	bls.w	8001258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40013800 	.word	0x40013800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40021000 	.word	0x40021000
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	460b      	mov	r3, r1
 80015b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015b8:	887a      	ldrh	r2, [r7, #2]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	041a      	lsls	r2, r3, #16
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	400b      	ands	r3, r1
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	619a      	str	r2, [r3, #24]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_MspInit+0x4c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_MspInit+0x4c>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_MspInit+0x4c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_MspInit+0x4c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	; 0x30
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a32      	ldr	r2, [pc, #200]	; (8001714 <HAL_UART_MspInit+0xe8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d12d      	bne.n	80016aa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <HAL_UART_MspInit+0xec>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a30      	ldr	r2, [pc, #192]	; (8001718 <HAL_UART_MspInit+0xec>)
 8001658:	f043 0310 	orr.w	r3, r3, #16
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_UART_MspInit+0xec>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <HAL_UART_MspInit+0xec>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a29      	ldr	r2, [pc, #164]	; (8001718 <HAL_UART_MspInit+0xec>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b27      	ldr	r3, [pc, #156]	; (8001718 <HAL_UART_MspInit+0xec>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001686:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001698:	2307      	movs	r3, #7
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	481e      	ldr	r0, [pc, #120]	; (800171c <HAL_UART_MspInit+0xf0>)
 80016a4:	f7ff fdca 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016a8:	e030      	b.n	800170c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <HAL_UART_MspInit+0xf4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d12b      	bne.n	800170c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_UART_MspInit+0xec>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_UART_MspInit+0xec>)
 80016be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c2:	6413      	str	r3, [r2, #64]	; 0x40
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_UART_MspInit+0xec>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_UART_MspInit+0xec>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_UART_MspInit+0xec>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6313      	str	r3, [r2, #48]	; 0x30
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_UART_MspInit+0xec>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ec:	230c      	movs	r3, #12
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fc:	2307      	movs	r3, #7
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_UART_MspInit+0xf0>)
 8001708:	f7ff fd98 	bl	800123c <HAL_GPIO_Init>
}
 800170c:	bf00      	nop
 800170e:	3730      	adds	r7, #48	; 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40011000 	.word	0x40011000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000
 8001720:	40004400 	.word	0x40004400

08001724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e267      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d075      	beq.n	800182e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001742:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b04      	cmp	r3, #4
 800174c:	d00c      	beq.n	8001768 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174e:	4b85      	ldr	r3, [pc, #532]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001756:	2b08      	cmp	r3, #8
 8001758:	d112      	bne.n	8001780 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175a:	4b82      	ldr	r3, [pc, #520]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001766:	d10b      	bne.n	8001780 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	4b7e      	ldr	r3, [pc, #504]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d05b      	beq.n	800182c <HAL_RCC_OscConfig+0x108>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d157      	bne.n	800182c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e242      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d106      	bne.n	8001798 <HAL_RCC_OscConfig+0x74>
 800178a:	4b76      	ldr	r3, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a75      	ldr	r2, [pc, #468]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e01d      	b.n	80017d4 <HAL_RCC_OscConfig+0xb0>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x98>
 80017a2:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6f      	ldr	r2, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b6d      	ldr	r3, [pc, #436]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6c      	ldr	r2, [pc, #432]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0xb0>
 80017bc:	4b69      	ldr	r3, [pc, #420]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a68      	ldr	r2, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b66      	ldr	r3, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a65      	ldr	r2, [pc, #404]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fbec 	bl	8000fb8 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fbe8 	bl	8000fb8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e207      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b5b      	ldr	r3, [pc, #364]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0xc0>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fbd8 	bl	8000fb8 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fbd4 	bl	8000fb8 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1f3      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	4b51      	ldr	r3, [pc, #324]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0xe8>
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d063      	beq.n	8001902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184e:	2b08      	cmp	r3, #8
 8001850:	d11c      	bne.n	800188c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001852:	4b44      	ldr	r3, [pc, #272]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d116      	bne.n	800188c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x152>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1c7      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4937      	ldr	r1, [pc, #220]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	e03a      	b.n	8001902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001894:	4b34      	ldr	r3, [pc, #208]	; (8001968 <HAL_RCC_OscConfig+0x244>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff fb8d 	bl	8000fb8 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff fb89 	bl	8000fb8 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1a8      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4925      	ldr	r1, [pc, #148]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_RCC_OscConfig+0x244>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb6c 	bl	8000fb8 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff fb68 	bl	8000fb8 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e187      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d036      	beq.n	800197c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d016      	beq.n	8001944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_RCC_OscConfig+0x248>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff fb4c 	bl	8000fb8 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fb48 	bl	8000fb8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e167      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x200>
 8001942:	e01b      	b.n	800197c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_OscConfig+0x248>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff fb35 	bl	8000fb8 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	e00e      	b.n	8001970 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001952:	f7ff fb31 	bl	8000fb8 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d907      	bls.n	8001970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e150      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
 8001964:	40023800 	.word	0x40023800
 8001968:	42470000 	.word	0x42470000
 800196c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ea      	bne.n	8001952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8097 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10f      	bne.n	80019ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a7c      	ldr	r2, [pc, #496]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b77      	ldr	r3, [pc, #476]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a73      	ldr	r2, [pc, #460]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7ff faf1 	bl	8000fb8 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff faed 	bl	8000fb8 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e10c      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2ea>
 8001a00:	4b64      	ldr	r3, [pc, #400]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a63      	ldr	r2, [pc, #396]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0c:	e01c      	b.n	8001a48 <HAL_RCC_OscConfig+0x324>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x30c>
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a5e      	ldr	r2, [pc, #376]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a5b      	ldr	r2, [pc, #364]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0x324>
 8001a30:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	4a57      	ldr	r2, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3c:	4b55      	ldr	r3, [pc, #340]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a42:	f023 0304 	bic.w	r3, r3, #4
 8001a46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d015      	beq.n	8001a7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff fab2 	bl	8000fb8 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff faae 	bl	8000fb8 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e0cb      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0ee      	beq.n	8001a58 <HAL_RCC_OscConfig+0x334>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fa9c 	bl	8000fb8 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff fa98 	bl	8000fb8 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0b5      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ee      	bne.n	8001a84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aac:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	4a38      	ldr	r2, [pc, #224]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80a1 	beq.w	8001c04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d05c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d141      	bne.n	8001b5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fa6c 	bl	8000fb8 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff fa68 	bl	8000fb8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e087      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	491b      	ldr	r1, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fa41 	bl	8000fb8 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff fa3d 	bl	8000fb8 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e05c      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x416>
 8001b58:	e054      	b.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fa2a 	bl	8000fb8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff fa26 	bl	8000fb8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e045      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x444>
 8001b86:	e03d      	b.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e038      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x4ec>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d028      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d121      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d11a      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d111      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	085b      	lsrs	r3, r3, #1
 8001be8:	3b01      	subs	r3, #1
 8001bea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0cc      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d90c      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b8      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	494d      	ldr	r1, [pc, #308]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d044      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d119      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e07f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e067      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf2:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f023 0203 	bic.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4934      	ldr	r1, [pc, #208]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d04:	f7ff f958 	bl	8000fb8 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0c:	f7ff f954 	bl	8000fb8 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e04f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 020c 	and.w	r2, r3, #12
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1eb      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d20c      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e032      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4916      	ldr	r1, [pc, #88]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d9a:	f000 f821 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	490a      	ldr	r1, [pc, #40]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f8b8 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023c00 	.word	0x40023c00
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08003734 	.word	0x08003734
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	2000000c 	.word	0x2000000c

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de4:	b090      	sub	sp, #64	; 0x40
 8001de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
 8001dec:	2300      	movs	r3, #0
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df8:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d00d      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x40>
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	f200 80a1 	bhi.w	8001f4c <HAL_RCC_GetSysClockFreq+0x16c>
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x34>
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d003      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e12:	e09b      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001e18:	e09b      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e1a:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e1e:	e098      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e20:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d028      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e36:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	099b      	lsrs	r3, r3, #6
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	627a      	str	r2, [r7, #36]	; 0x24
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e4c:	fb03 f201 	mul.w	r2, r3, r1
 8001e50:	2300      	movs	r3, #0
 8001e52:	fb00 f303 	mul.w	r3, r0, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	4a43      	ldr	r2, [pc, #268]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e5a:	fba0 1202 	umull	r1, r2, r0, r2
 8001e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e60:	460a      	mov	r2, r1
 8001e62:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e66:	4413      	add	r3, r2
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	61fa      	str	r2, [r7, #28]
 8001e72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e7a:	f7fe fa09 	bl	8000290 <__aeabi_uldivmod>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4613      	mov	r3, r2
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e86:	e053      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e88:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	2200      	movs	r2, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	617a      	str	r2, [r7, #20]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e9a:	f04f 0b00 	mov.w	fp, #0
 8001e9e:	4652      	mov	r2, sl
 8001ea0:	465b      	mov	r3, fp
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	0159      	lsls	r1, r3, #5
 8001eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb0:	0150      	lsls	r0, r2, #5
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	ebb2 080a 	subs.w	r8, r2, sl
 8001eba:	eb63 090b 	sbc.w	r9, r3, fp
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001eca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ece:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ed2:	ebb2 0408 	subs.w	r4, r2, r8
 8001ed6:	eb63 0509 	sbc.w	r5, r3, r9
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	00eb      	lsls	r3, r5, #3
 8001ee4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee8:	00e2      	lsls	r2, r4, #3
 8001eea:	4614      	mov	r4, r2
 8001eec:	461d      	mov	r5, r3
 8001eee:	eb14 030a 	adds.w	r3, r4, sl
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	eb45 030b 	adc.w	r3, r5, fp
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f06:	4629      	mov	r1, r5
 8001f08:	028b      	lsls	r3, r1, #10
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f10:	4621      	mov	r1, r4
 8001f12:	028a      	lsls	r2, r1, #10
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	60fa      	str	r2, [r7, #12]
 8001f20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f24:	f7fe f9b4 	bl	8000290 <__aeabi_uldivmod>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3740      	adds	r7, #64	; 0x40
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	00f42400 	.word	0x00f42400
 8001f68:	017d7840 	.word	0x017d7840

08001f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008

08001f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0a9b      	lsrs	r3, r3, #10
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	08003744 	.word	0x08003744

08001fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fb0:	f7ff ffdc 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	0b5b      	lsrs	r3, r3, #13
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4903      	ldr	r1, [pc, #12]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	08003744 	.word	0x08003744

08001fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e03f      	b.n	8002066 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fb16 	bl	800162c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2224      	movs	r2, #36	; 0x24
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f9cb 	bl	80023b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800202c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800203c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800204c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b08a      	sub	sp, #40	; 0x28
 8002072:	af02      	add	r7, sp, #8
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4613      	mov	r3, r2
 800207c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b20      	cmp	r3, #32
 800208c:	d17c      	bne.n	8002188 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_UART_Transmit+0x2c>
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e075      	b.n	800218a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_UART_Transmit+0x3e>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e06e      	b.n	800218a <HAL_UART_Transmit+0x11c>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2221      	movs	r2, #33	; 0x21
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020c2:	f7fe ff79 	bl	8000fb8 <HAL_GetTick>
 80020c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	88fa      	ldrh	r2, [r7, #6]
 80020cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	88fa      	ldrh	r2, [r7, #6]
 80020d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020dc:	d108      	bne.n	80020f0 <HAL_UART_Transmit+0x82>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d104      	bne.n	80020f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	e003      	b.n	80020f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002100:	e02a      	b.n	8002158 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f8e2 	bl	80022d6 <UART_WaitOnFlagUntilTimeout>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e036      	b.n	800218a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10b      	bne.n	800213a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002130:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3302      	adds	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e007      	b.n	800214a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800214e:	b29b      	uxth	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1cf      	bne.n	8002102 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	2140      	movs	r1, #64	; 0x40
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f8b2 	bl	80022d6 <UART_WaitOnFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e006      	b.n	800218a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	e000      	b.n	800218a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b08a      	sub	sp, #40	; 0x28
 8002196:	af02      	add	r7, sp, #8
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	f040 808c 	bne.w	80022cc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <HAL_UART_Receive+0x2e>
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e084      	b.n	80022ce <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_UART_Receive+0x40>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e07d      	b.n	80022ce <HAL_UART_Receive+0x13c>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2222      	movs	r2, #34	; 0x22
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ee:	f7fe fee3 	bl	8000fb8 <HAL_GetTick>
 80021f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002208:	d108      	bne.n	800221c <HAL_UART_Receive+0x8a>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	e003      	b.n	8002224 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800222c:	e043      	b.n	80022b6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2200      	movs	r2, #0
 8002236:	2120      	movs	r1, #32
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f84c 	bl	80022d6 <UART_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e042      	b.n	80022ce <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10c      	bne.n	8002268 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	b29b      	uxth	r3, r3
 8002256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800225a:	b29a      	uxth	r2, r3
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	3302      	adds	r3, #2
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	e01f      	b.n	80022a8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002270:	d007      	beq.n	8002282 <HAL_UART_Receive+0xf0>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10a      	bne.n	8002290 <HAL_UART_Receive+0xfe>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	e008      	b.n	80022a2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800229c:	b2da      	uxtb	r2, r3
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3301      	adds	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1b6      	bne.n	800222e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b090      	sub	sp, #64	; 0x40
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4613      	mov	r3, r2
 80022e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022e6:	e050      	b.n	800238a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d04c      	beq.n	800238a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <UART_WaitOnFlagUntilTimeout+0x30>
 80022f6:	f7fe fe5f 	bl	8000fb8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002302:	429a      	cmp	r2, r3
 8002304:	d241      	bcs.n	800238a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	330c      	adds	r3, #12
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	e853 3f00 	ldrex	r3, [r3]
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800231c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	330c      	adds	r3, #12
 8002324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002326:	637a      	str	r2, [r7, #52]	; 0x34
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800232c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800232e:	e841 2300 	strex	r3, r2, [r1]
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e5      	bne.n	8002306 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3314      	adds	r3, #20
 8002340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	e853 3f00 	ldrex	r3, [r3]
 8002348:	613b      	str	r3, [r7, #16]
   return(result);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	63bb      	str	r3, [r7, #56]	; 0x38
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3314      	adds	r3, #20
 8002358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800235a:	623a      	str	r2, [r7, #32]
 800235c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235e:	69f9      	ldr	r1, [r7, #28]
 8002360:	6a3a      	ldr	r2, [r7, #32]
 8002362:	e841 2300 	strex	r3, r2, [r1]
 8002366:	61bb      	str	r3, [r7, #24]
   return(result);
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1e5      	bne.n	800233a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e00f      	b.n	80023aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4013      	ands	r3, r2
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	429a      	cmp	r2, r3
 8002398:	bf0c      	ite	eq
 800239a:	2301      	moveq	r3, #1
 800239c:	2300      	movne	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d09f      	beq.n	80022e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3740      	adds	r7, #64	; 0x40
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b8:	b0c0      	sub	sp, #256	; 0x100
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	ea40 0301 	orr.w	r3, r0, r1
 80023dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800240c:	f021 010c 	bic.w	r1, r1, #12
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800241a:	430b      	orrs	r3, r1
 800241c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800241e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800242a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242e:	6999      	ldr	r1, [r3, #24]
 8002430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	ea40 0301 	orr.w	r3, r0, r1
 800243a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b8f      	ldr	r3, [pc, #572]	; (8002680 <UART_SetConfig+0x2cc>)
 8002444:	429a      	cmp	r2, r3
 8002446:	d005      	beq.n	8002454 <UART_SetConfig+0xa0>
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b8d      	ldr	r3, [pc, #564]	; (8002684 <UART_SetConfig+0x2d0>)
 8002450:	429a      	cmp	r2, r3
 8002452:	d104      	bne.n	800245e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002454:	f7ff fdaa 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
 8002458:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800245c:	e003      	b.n	8002466 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800245e:	f7ff fd91 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8002462:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002470:	f040 810c 	bne.w	800268c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002478:	2200      	movs	r2, #0
 800247a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800247e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002482:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002486:	4622      	mov	r2, r4
 8002488:	462b      	mov	r3, r5
 800248a:	1891      	adds	r1, r2, r2
 800248c:	65b9      	str	r1, [r7, #88]	; 0x58
 800248e:	415b      	adcs	r3, r3
 8002490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002492:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002496:	4621      	mov	r1, r4
 8002498:	eb12 0801 	adds.w	r8, r2, r1
 800249c:	4629      	mov	r1, r5
 800249e:	eb43 0901 	adc.w	r9, r3, r1
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024b6:	4690      	mov	r8, r2
 80024b8:	4699      	mov	r9, r3
 80024ba:	4623      	mov	r3, r4
 80024bc:	eb18 0303 	adds.w	r3, r8, r3
 80024c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024c4:	462b      	mov	r3, r5
 80024c6:	eb49 0303 	adc.w	r3, r9, r3
 80024ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024e2:	460b      	mov	r3, r1
 80024e4:	18db      	adds	r3, r3, r3
 80024e6:	653b      	str	r3, [r7, #80]	; 0x50
 80024e8:	4613      	mov	r3, r2
 80024ea:	eb42 0303 	adc.w	r3, r2, r3
 80024ee:	657b      	str	r3, [r7, #84]	; 0x54
 80024f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80024f8:	f7fd feca 	bl	8000290 <__aeabi_uldivmod>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4b61      	ldr	r3, [pc, #388]	; (8002688 <UART_SetConfig+0x2d4>)
 8002502:	fba3 2302 	umull	r2, r3, r3, r2
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	011c      	lsls	r4, r3, #4
 800250a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800250e:	2200      	movs	r2, #0
 8002510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002514:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002518:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800251c:	4642      	mov	r2, r8
 800251e:	464b      	mov	r3, r9
 8002520:	1891      	adds	r1, r2, r2
 8002522:	64b9      	str	r1, [r7, #72]	; 0x48
 8002524:	415b      	adcs	r3, r3
 8002526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002528:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800252c:	4641      	mov	r1, r8
 800252e:	eb12 0a01 	adds.w	sl, r2, r1
 8002532:	4649      	mov	r1, r9
 8002534:	eb43 0b01 	adc.w	fp, r3, r1
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002544:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002548:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800254c:	4692      	mov	sl, r2
 800254e:	469b      	mov	fp, r3
 8002550:	4643      	mov	r3, r8
 8002552:	eb1a 0303 	adds.w	r3, sl, r3
 8002556:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800255a:	464b      	mov	r3, r9
 800255c:	eb4b 0303 	adc.w	r3, fp, r3
 8002560:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002570:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002574:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002578:	460b      	mov	r3, r1
 800257a:	18db      	adds	r3, r3, r3
 800257c:	643b      	str	r3, [r7, #64]	; 0x40
 800257e:	4613      	mov	r3, r2
 8002580:	eb42 0303 	adc.w	r3, r2, r3
 8002584:	647b      	str	r3, [r7, #68]	; 0x44
 8002586:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800258a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800258e:	f7fd fe7f 	bl	8000290 <__aeabi_uldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4611      	mov	r1, r2
 8002598:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <UART_SetConfig+0x2d4>)
 800259a:	fba3 2301 	umull	r2, r3, r3, r1
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2264      	movs	r2, #100	; 0x64
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	1acb      	subs	r3, r1, r3
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <UART_SetConfig+0x2d4>)
 80025b0:	fba3 2302 	umull	r2, r3, r3, r2
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025bc:	441c      	add	r4, r3
 80025be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025d0:	4642      	mov	r2, r8
 80025d2:	464b      	mov	r3, r9
 80025d4:	1891      	adds	r1, r2, r2
 80025d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80025d8:	415b      	adcs	r3, r3
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025e0:	4641      	mov	r1, r8
 80025e2:	1851      	adds	r1, r2, r1
 80025e4:	6339      	str	r1, [r7, #48]	; 0x30
 80025e6:	4649      	mov	r1, r9
 80025e8:	414b      	adcs	r3, r1
 80025ea:	637b      	str	r3, [r7, #52]	; 0x34
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80025f8:	4659      	mov	r1, fp
 80025fa:	00cb      	lsls	r3, r1, #3
 80025fc:	4651      	mov	r1, sl
 80025fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002602:	4651      	mov	r1, sl
 8002604:	00ca      	lsls	r2, r1, #3
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	4603      	mov	r3, r0
 800260c:	4642      	mov	r2, r8
 800260e:	189b      	adds	r3, r3, r2
 8002610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002614:	464b      	mov	r3, r9
 8002616:	460a      	mov	r2, r1
 8002618:	eb42 0303 	adc.w	r3, r2, r3
 800261c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800262c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002630:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002634:	460b      	mov	r3, r1
 8002636:	18db      	adds	r3, r3, r3
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
 800263a:	4613      	mov	r3, r2
 800263c:	eb42 0303 	adc.w	r3, r2, r3
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002646:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800264a:	f7fd fe21 	bl	8000290 <__aeabi_uldivmod>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <UART_SetConfig+0x2d4>)
 8002654:	fba3 1302 	umull	r1, r3, r3, r2
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	2164      	movs	r1, #100	; 0x64
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	3332      	adds	r3, #50	; 0x32
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <UART_SetConfig+0x2d4>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	f003 0207 	and.w	r2, r3, #7
 8002672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4422      	add	r2, r4
 800267a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800267c:	e105      	b.n	800288a <UART_SetConfig+0x4d6>
 800267e:	bf00      	nop
 8002680:	40011000 	.word	0x40011000
 8002684:	40011400 	.word	0x40011400
 8002688:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800268c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002690:	2200      	movs	r2, #0
 8002692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002696:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800269a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800269e:	4642      	mov	r2, r8
 80026a0:	464b      	mov	r3, r9
 80026a2:	1891      	adds	r1, r2, r2
 80026a4:	6239      	str	r1, [r7, #32]
 80026a6:	415b      	adcs	r3, r3
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ae:	4641      	mov	r1, r8
 80026b0:	1854      	adds	r4, r2, r1
 80026b2:	4649      	mov	r1, r9
 80026b4:	eb43 0501 	adc.w	r5, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	00eb      	lsls	r3, r5, #3
 80026c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c6:	00e2      	lsls	r2, r4, #3
 80026c8:	4614      	mov	r4, r2
 80026ca:	461d      	mov	r5, r3
 80026cc:	4643      	mov	r3, r8
 80026ce:	18e3      	adds	r3, r4, r3
 80026d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026d4:	464b      	mov	r3, r9
 80026d6:	eb45 0303 	adc.w	r3, r5, r3
 80026da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026fa:	4629      	mov	r1, r5
 80026fc:	008b      	lsls	r3, r1, #2
 80026fe:	4621      	mov	r1, r4
 8002700:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002704:	4621      	mov	r1, r4
 8002706:	008a      	lsls	r2, r1, #2
 8002708:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800270c:	f7fd fdc0 	bl	8000290 <__aeabi_uldivmod>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4b60      	ldr	r3, [pc, #384]	; (8002898 <UART_SetConfig+0x4e4>)
 8002716:	fba3 2302 	umull	r2, r3, r3, r2
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	011c      	lsls	r4, r3, #4
 800271e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002722:	2200      	movs	r2, #0
 8002724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002728:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800272c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	1891      	adds	r1, r2, r2
 8002736:	61b9      	str	r1, [r7, #24]
 8002738:	415b      	adcs	r3, r3
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002740:	4641      	mov	r1, r8
 8002742:	1851      	adds	r1, r2, r1
 8002744:	6139      	str	r1, [r7, #16]
 8002746:	4649      	mov	r1, r9
 8002748:	414b      	adcs	r3, r1
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002758:	4659      	mov	r1, fp
 800275a:	00cb      	lsls	r3, r1, #3
 800275c:	4651      	mov	r1, sl
 800275e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002762:	4651      	mov	r1, sl
 8002764:	00ca      	lsls	r2, r1, #3
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	4603      	mov	r3, r0
 800276c:	4642      	mov	r2, r8
 800276e:	189b      	adds	r3, r3, r2
 8002770:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002774:	464b      	mov	r3, r9
 8002776:	460a      	mov	r2, r1
 8002778:	eb42 0303 	adc.w	r3, r2, r3
 800277c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	67bb      	str	r3, [r7, #120]	; 0x78
 800278a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002798:	4649      	mov	r1, r9
 800279a:	008b      	lsls	r3, r1, #2
 800279c:	4641      	mov	r1, r8
 800279e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027a2:	4641      	mov	r1, r8
 80027a4:	008a      	lsls	r2, r1, #2
 80027a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027aa:	f7fd fd71 	bl	8000290 <__aeabi_uldivmod>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <UART_SetConfig+0x4e4>)
 80027b4:	fba3 1302 	umull	r1, r3, r3, r2
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	2164      	movs	r1, #100	; 0x64
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	3332      	adds	r3, #50	; 0x32
 80027c6:	4a34      	ldr	r2, [pc, #208]	; (8002898 <UART_SetConfig+0x4e4>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d2:	441c      	add	r4, r3
 80027d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027d8:	2200      	movs	r2, #0
 80027da:	673b      	str	r3, [r7, #112]	; 0x70
 80027dc:	677a      	str	r2, [r7, #116]	; 0x74
 80027de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027e2:	4642      	mov	r2, r8
 80027e4:	464b      	mov	r3, r9
 80027e6:	1891      	adds	r1, r2, r2
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	415b      	adcs	r3, r3
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027f2:	4641      	mov	r1, r8
 80027f4:	1851      	adds	r1, r2, r1
 80027f6:	6039      	str	r1, [r7, #0]
 80027f8:	4649      	mov	r1, r9
 80027fa:	414b      	adcs	r3, r1
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800280a:	4659      	mov	r1, fp
 800280c:	00cb      	lsls	r3, r1, #3
 800280e:	4651      	mov	r1, sl
 8002810:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002814:	4651      	mov	r1, sl
 8002816:	00ca      	lsls	r2, r1, #3
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	4603      	mov	r3, r0
 800281e:	4642      	mov	r2, r8
 8002820:	189b      	adds	r3, r3, r2
 8002822:	66bb      	str	r3, [r7, #104]	; 0x68
 8002824:	464b      	mov	r3, r9
 8002826:	460a      	mov	r2, r1
 8002828:	eb42 0303 	adc.w	r3, r2, r3
 800282c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800282e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	663b      	str	r3, [r7, #96]	; 0x60
 8002838:	667a      	str	r2, [r7, #100]	; 0x64
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002846:	4649      	mov	r1, r9
 8002848:	008b      	lsls	r3, r1, #2
 800284a:	4641      	mov	r1, r8
 800284c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002850:	4641      	mov	r1, r8
 8002852:	008a      	lsls	r2, r1, #2
 8002854:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002858:	f7fd fd1a 	bl	8000290 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <UART_SetConfig+0x4e4>)
 8002862:	fba3 1302 	umull	r1, r3, r3, r2
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2164      	movs	r1, #100	; 0x64
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	3332      	adds	r3, #50	; 0x32
 8002874:	4a08      	ldr	r2, [pc, #32]	; (8002898 <UART_SetConfig+0x4e4>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	f003 020f 	and.w	r2, r3, #15
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4422      	add	r2, r4
 8002888:	609a      	str	r2, [r3, #8]
}
 800288a:	bf00      	nop
 800288c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002890:	46bd      	mov	sp, r7
 8002892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002896:	bf00      	nop
 8002898:	51eb851f 	.word	0x51eb851f

0800289c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028a0:	f7fe fb24 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028a4:	f000 f89c 	bl	80029e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028a8:	f000 f956 	bl	8002b58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028ac:	f000 f92a 	bl	8002b04 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80028b0:	f000 f8fe 	bl	8002ab0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_USER);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7fd ff6b 	bl	8000790 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80028ba:	2100      	movs	r1, #0
 80028bc:	2000      	movs	r0, #0
 80028be:	f7fd ffcb 	bl	8000858 <BSP_PB_Init>

  delayInit(&delayNBLeds,DELAY_LED);	/* initialize structure to implement a delay no blocking */
 80028c2:	21c8      	movs	r1, #200	; 0xc8
 80028c4:	4839      	ldr	r0, [pc, #228]	; (80029ac <main+0x110>)
 80028c6:	f7fd ff1c 	bl	8000702 <delayInit>
  debounceFSM_init();					/* initialize FSM for anti debounce*/
 80028ca:	f7fd fe63 	bl	8000594 <debounceFSM_init>

  BSP_LED_On(LED_USER);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fd ff96 	bl	8000800 <BSP_LED_On>
  /* USER CODE END 2 */
  if(SIM800_Default_ConfigHW() == OK)
 80028d4:	f7fe f89c 	bl	8000a10 <SIM800_Default_ConfigHW>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d107      	bne.n	80028ee <main+0x52>
  	  HAL_UART_Transmit(&huart2, (const uint8_t*)"HW SIM OK\r\n", strlen("HW SIM OK\r\n"), 1000);
 80028de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e2:	220b      	movs	r2, #11
 80028e4:	4932      	ldr	r1, [pc, #200]	; (80029b0 <main+0x114>)
 80028e6:	4833      	ldr	r0, [pc, #204]	; (80029b4 <main+0x118>)
 80028e8:	f7ff fbc1 	bl	800206e <HAL_UART_Transmit>
 80028ec:	e006      	b.n	80028fc <main+0x60>
  else
  	  HAL_UART_Transmit(&huart2, (const uint8_t*)"HW SIM NO CONFIG\r\n", strlen("HW SIM NO CONFIG\r\n"), 1000);
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	2212      	movs	r2, #18
 80028f4:	4930      	ldr	r1, [pc, #192]	; (80029b8 <main+0x11c>)
 80028f6:	482f      	ldr	r0, [pc, #188]	; (80029b4 <main+0x118>)
 80028f8:	f7ff fbb9 	bl	800206e <HAL_UART_Transmit>

  SIM800_On();
 80028fc:	f7fe f9e4 	bl	8000cc8 <SIM800_On>
  HAL_UART_Transmit(&huart2, (const uint8_t*)"SIM ACTIVATED\r\n", strlen("SIM ACTIVATED\r\n"), 1000);
 8002900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002904:	220f      	movs	r2, #15
 8002906:	492d      	ldr	r1, [pc, #180]	; (80029bc <main+0x120>)
 8002908:	482a      	ldr	r0, [pc, #168]	; (80029b4 <main+0x118>)
 800290a:	f7ff fbb0 	bl	800206e <HAL_UART_Transmit>

  if(SIM800_Init() == OK)
 800290e:	f7fe f891 	bl	8000a34 <SIM800_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <main+0x8c>
	  HAL_UART_Transmit(&huart2, (const uint8_t*)"CONFIGURED\r", strlen("CONFIGURED\r"), 1000);
 8002918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291c:	220b      	movs	r2, #11
 800291e:	4928      	ldr	r1, [pc, #160]	; (80029c0 <main+0x124>)
 8002920:	4824      	ldr	r0, [pc, #144]	; (80029b4 <main+0x118>)
 8002922:	f7ff fba4 	bl	800206e <HAL_UART_Transmit>
 8002926:	e006      	b.n	8002936 <main+0x9a>
  else
	  HAL_UART_Transmit(&huart2, (const uint8_t*)"FAIL\r", strlen("NOK\r"), 1000);
 8002928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800292c:	2204      	movs	r2, #4
 800292e:	4925      	ldr	r1, [pc, #148]	; (80029c4 <main+0x128>)
 8002930:	4820      	ldr	r0, [pc, #128]	; (80029b4 <main+0x118>)
 8002932:	f7ff fb9c 	bl	800206e <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  debounceFSM_update(); //update FSM
 8002936:	f7fd fe3f 	bl	80005b8 <debounceFSM_update>

	  if (readKey())
 800293a:	f7fd fec3 	bl	80006c4 <readKey>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d028      	beq.n	8002996 <main+0xfa>
	  {
		  HAL_UART_Transmit(&huart2, (const uint8_t*)"BUTTON PRESSED\r", strlen("BUTTON PRESSED\r"), 1000);
 8002944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002948:	220f      	movs	r2, #15
 800294a:	491f      	ldr	r1, [pc, #124]	; (80029c8 <main+0x12c>)
 800294c:	4819      	ldr	r0, [pc, #100]	; (80029b4 <main+0x118>)
 800294e:	f7ff fb8e 	bl	800206e <HAL_UART_Transmit>
		  /*Check if we are registered in the network*/
		  if(check_Network_Registration()== OK)	//
 8002952:	f7fe f903 	bl	8000b5c <check_Network_Registration>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d11c      	bne.n	8002996 <main+0xfa>
		  {
			  HAL_UART_Transmit(&huart2, (const uint8_t*)"SIM REGISTERED\r", strlen("SIM REGISTERED\r"), 1000);
 800295c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002960:	220f      	movs	r2, #15
 8002962:	491a      	ldr	r1, [pc, #104]	; (80029cc <main+0x130>)
 8002964:	4813      	ldr	r0, [pc, #76]	; (80029b4 <main+0x118>)
 8002966:	f7ff fb82 	bl	800206e <HAL_UART_Transmit>

			  /* Send text SMS to the indicated number */
			  if(send_SMS(&cellNumber,&sms) == OK)
 800296a:	4919      	ldr	r1, [pc, #100]	; (80029d0 <main+0x134>)
 800296c:	4819      	ldr	r0, [pc, #100]	; (80029d4 <main+0x138>)
 800296e:	f7fe f919 	bl	8000ba4 <send_SMS>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <main+0xec>
				  HAL_UART_Transmit(&huart2, (const uint8_t*)"SMS SENT\r", strlen("SMS SENT\r"), 1000);
 8002978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297c:	2209      	movs	r2, #9
 800297e:	4916      	ldr	r1, [pc, #88]	; (80029d8 <main+0x13c>)
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <main+0x118>)
 8002982:	f7ff fb74 	bl	800206e <HAL_UART_Transmit>
 8002986:	e006      	b.n	8002996 <main+0xfa>
			  else
				  HAL_UART_Transmit(&huart2, (const uint8_t*)"SMS NOT SENT\r", strlen("SMS NOT SENT\r"), 1000);
 8002988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298c:	220d      	movs	r2, #13
 800298e:	4913      	ldr	r1, [pc, #76]	; (80029dc <main+0x140>)
 8002990:	4808      	ldr	r0, [pc, #32]	; (80029b4 <main+0x118>)
 8002992:	f7ff fb6c 	bl	800206e <HAL_UART_Transmit>
		  }
	  }

	  /* Check if delay is expired for toggle LED_USER */
	  if(delayRead(&delayNBLeds))	//
 8002996:	4805      	ldr	r0, [pc, #20]	; (80029ac <main+0x110>)
 8002998:	f7fd fecf 	bl	800073a <delayRead>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0c9      	beq.n	8002936 <main+0x9a>
		  BSP_LED_Toggle(LED_USER);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7fd ff42 	bl	800082c <BSP_LED_Toggle>
	  debounceFSM_update(); //update FSM
 80029a8:	e7c5      	b.n	8002936 <main+0x9a>
 80029aa:	bf00      	nop
 80029ac:	200001e4 	.word	0x200001e4
 80029b0:	080036b4 	.word	0x080036b4
 80029b4:	20000234 	.word	0x20000234
 80029b8:	080036c0 	.word	0x080036c0
 80029bc:	080036d4 	.word	0x080036d4
 80029c0:	080036e4 	.word	0x080036e4
 80029c4:	080036f0 	.word	0x080036f0
 80029c8:	080036f8 	.word	0x080036f8
 80029cc:	08003708 	.word	0x08003708
 80029d0:	20000024 	.word	0x20000024
 80029d4:	20000014 	.word	0x20000014
 80029d8:	08003718 	.word	0x08003718
 80029dc:	08003724 	.word	0x08003724

080029e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b094      	sub	sp, #80	; 0x50
 80029e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e6:	f107 0320 	add.w	r3, r7, #32
 80029ea:	2230      	movs	r2, #48	; 0x30
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f934 	bl	8002c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <SystemClock_Config+0xc8>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <SystemClock_Config+0xc8>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6413      	str	r3, [r2, #64]	; 0x40
 8002a14:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <SystemClock_Config+0xc8>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a20:	2300      	movs	r3, #0
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	4b21      	ldr	r3, [pc, #132]	; (8002aac <SystemClock_Config+0xcc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a20      	ldr	r2, [pc, #128]	; (8002aac <SystemClock_Config+0xcc>)
 8002a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <SystemClock_Config+0xcc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a46:	2302      	movs	r3, #2
 8002a48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002a50:	2319      	movs	r3, #25
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002a54:	23a0      	movs	r3, #160	; 0xa0
 8002a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a60:	f107 0320 	add.w	r3, r7, #32
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fe5d 	bl	8001724 <HAL_RCC_OscConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a70:	f000 f89a 	bl	8002ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a74:	230f      	movs	r3, #15
 8002a76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	2102      	movs	r1, #2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff f8bf 	bl	8001c14 <HAL_RCC_ClockConfig>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002a9c:	f000 f884 	bl	8002ba8 <Error_Handler>
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3750      	adds	r7, #80	; 0x50
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40007000 	.word	0x40007000

08002ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <MX_USART1_UART_Init+0x50>)
 8002ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002abc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ae6:	4805      	ldr	r0, [pc, #20]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ae8:	f7ff fa74 	bl	8001fd4 <HAL_UART_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002af2:	f000 f859 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200001f0 	.word	0x200001f0
 8002b00:	40011000 	.word	0x40011000

08002b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <MX_USART2_UART_Init+0x4c>)
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <MX_USART2_UART_Init+0x50>)
 8002b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <MX_USART2_UART_Init+0x4c>)
 8002b10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <MX_USART2_UART_Init+0x4c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <MX_USART2_UART_Init+0x4c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <MX_USART2_UART_Init+0x4c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <MX_USART2_UART_Init+0x4c>)
 8002b2a:	220c      	movs	r2, #12
 8002b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <MX_USART2_UART_Init+0x4c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <MX_USART2_UART_Init+0x4c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b3a:	4805      	ldr	r0, [pc, #20]	; (8002b50 <MX_USART2_UART_Init+0x4c>)
 8002b3c:	f7ff fa4a 	bl	8001fd4 <HAL_UART_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b46:	f000 f82f 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000234 	.word	0x20000234
 8002b54:	40004400 	.word	0x40004400

08002b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <MX_GPIO_Init+0x4c>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <MX_GPIO_Init+0x4c>)
 8002b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <MX_GPIO_Init+0x4c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <MX_GPIO_Init+0x4c>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <MX_GPIO_Init+0x4c>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <MX_GPIO_Init+0x4c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]

}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bac:	b672      	cpsid	i
}
 8002bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <Error_Handler+0x8>
	...

08002bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bb8:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bba:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bbc:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc0:	e002      	b.n	8002bc8 <LoopCopyDataInit>

08002bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc6:	3304      	adds	r3, #4

08002bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bcc:	d3f9      	bcc.n	8002bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bce:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bd0:	4c0b      	ldr	r4, [pc, #44]	; (8002c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd4:	e001      	b.n	8002bda <LoopFillZerobss>

08002bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd8:	3204      	adds	r2, #4

08002bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bdc:	d3fb      	bcc.n	8002bd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bde:	f7fd fea5 	bl	800092c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002be2:	f000 f817 	bl	8002c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be6:	f7ff fe59 	bl	800289c <main>
  bx  lr    
 8002bea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf4:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002bf8:	08003790 	.word	0x08003790
  ldr r2, =_sbss
 8002bfc:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002c00:	20000288 	.word	0x20000288

08002c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC_IRQHandler>
	...

08002c08 <__errno>:
 8002c08:	4b01      	ldr	r3, [pc, #4]	; (8002c10 <__errno+0x8>)
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000060 	.word	0x20000060

08002c14 <__libc_init_array>:
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	4d0d      	ldr	r5, [pc, #52]	; (8002c4c <__libc_init_array+0x38>)
 8002c18:	4c0d      	ldr	r4, [pc, #52]	; (8002c50 <__libc_init_array+0x3c>)
 8002c1a:	1b64      	subs	r4, r4, r5
 8002c1c:	10a4      	asrs	r4, r4, #2
 8002c1e:	2600      	movs	r6, #0
 8002c20:	42a6      	cmp	r6, r4
 8002c22:	d109      	bne.n	8002c38 <__libc_init_array+0x24>
 8002c24:	4d0b      	ldr	r5, [pc, #44]	; (8002c54 <__libc_init_array+0x40>)
 8002c26:	4c0c      	ldr	r4, [pc, #48]	; (8002c58 <__libc_init_array+0x44>)
 8002c28:	f000 fca4 	bl	8003574 <_init>
 8002c2c:	1b64      	subs	r4, r4, r5
 8002c2e:	10a4      	asrs	r4, r4, #2
 8002c30:	2600      	movs	r6, #0
 8002c32:	42a6      	cmp	r6, r4
 8002c34:	d105      	bne.n	8002c42 <__libc_init_array+0x2e>
 8002c36:	bd70      	pop	{r4, r5, r6, pc}
 8002c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c3c:	4798      	blx	r3
 8002c3e:	3601      	adds	r6, #1
 8002c40:	e7ee      	b.n	8002c20 <__libc_init_array+0xc>
 8002c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c46:	4798      	blx	r3
 8002c48:	3601      	adds	r6, #1
 8002c4a:	e7f2      	b.n	8002c32 <__libc_init_array+0x1e>
 8002c4c:	08003788 	.word	0x08003788
 8002c50:	08003788 	.word	0x08003788
 8002c54:	08003788 	.word	0x08003788
 8002c58:	0800378c 	.word	0x0800378c

08002c5c <memset>:
 8002c5c:	4402      	add	r2, r0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d100      	bne.n	8002c66 <memset+0xa>
 8002c64:	4770      	bx	lr
 8002c66:	f803 1b01 	strb.w	r1, [r3], #1
 8002c6a:	e7f9      	b.n	8002c60 <memset+0x4>

08002c6c <siprintf>:
 8002c6c:	b40e      	push	{r1, r2, r3}
 8002c6e:	b500      	push	{lr}
 8002c70:	b09c      	sub	sp, #112	; 0x70
 8002c72:	ab1d      	add	r3, sp, #116	; 0x74
 8002c74:	9002      	str	r0, [sp, #8]
 8002c76:	9006      	str	r0, [sp, #24]
 8002c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c7c:	4809      	ldr	r0, [pc, #36]	; (8002ca4 <siprintf+0x38>)
 8002c7e:	9107      	str	r1, [sp, #28]
 8002c80:	9104      	str	r1, [sp, #16]
 8002c82:	4909      	ldr	r1, [pc, #36]	; (8002ca8 <siprintf+0x3c>)
 8002c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c88:	9105      	str	r1, [sp, #20]
 8002c8a:	6800      	ldr	r0, [r0, #0]
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	a902      	add	r1, sp, #8
 8002c90:	f000 f87e 	bl	8002d90 <_svfiprintf_r>
 8002c94:	9b02      	ldr	r3, [sp, #8]
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	b01c      	add	sp, #112	; 0x70
 8002c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ca0:	b003      	add	sp, #12
 8002ca2:	4770      	bx	lr
 8002ca4:	20000060 	.word	0x20000060
 8002ca8:	ffff0208 	.word	0xffff0208

08002cac <strstr>:
 8002cac:	780a      	ldrb	r2, [r1, #0]
 8002cae:	b570      	push	{r4, r5, r6, lr}
 8002cb0:	b96a      	cbnz	r2, 8002cce <strstr+0x22>
 8002cb2:	bd70      	pop	{r4, r5, r6, pc}
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d109      	bne.n	8002ccc <strstr+0x20>
 8002cb8:	460c      	mov	r4, r1
 8002cba:	4605      	mov	r5, r0
 8002cbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f6      	beq.n	8002cb2 <strstr+0x6>
 8002cc4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002cc8:	429e      	cmp	r6, r3
 8002cca:	d0f7      	beq.n	8002cbc <strstr+0x10>
 8002ccc:	3001      	adds	r0, #1
 8002cce:	7803      	ldrb	r3, [r0, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ef      	bne.n	8002cb4 <strstr+0x8>
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	e7ec      	b.n	8002cb2 <strstr+0x6>

08002cd8 <__ssputs_r>:
 8002cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cdc:	688e      	ldr	r6, [r1, #8]
 8002cde:	429e      	cmp	r6, r3
 8002ce0:	4682      	mov	sl, r0
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	4690      	mov	r8, r2
 8002ce6:	461f      	mov	r7, r3
 8002ce8:	d838      	bhi.n	8002d5c <__ssputs_r+0x84>
 8002cea:	898a      	ldrh	r2, [r1, #12]
 8002cec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cf0:	d032      	beq.n	8002d58 <__ssputs_r+0x80>
 8002cf2:	6825      	ldr	r5, [r4, #0]
 8002cf4:	6909      	ldr	r1, [r1, #16]
 8002cf6:	eba5 0901 	sub.w	r9, r5, r1
 8002cfa:	6965      	ldr	r5, [r4, #20]
 8002cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d04:	3301      	adds	r3, #1
 8002d06:	444b      	add	r3, r9
 8002d08:	106d      	asrs	r5, r5, #1
 8002d0a:	429d      	cmp	r5, r3
 8002d0c:	bf38      	it	cc
 8002d0e:	461d      	movcc	r5, r3
 8002d10:	0553      	lsls	r3, r2, #21
 8002d12:	d531      	bpl.n	8002d78 <__ssputs_r+0xa0>
 8002d14:	4629      	mov	r1, r5
 8002d16:	f000 fb63 	bl	80033e0 <_malloc_r>
 8002d1a:	4606      	mov	r6, r0
 8002d1c:	b950      	cbnz	r0, 8002d34 <__ssputs_r+0x5c>
 8002d1e:	230c      	movs	r3, #12
 8002d20:	f8ca 3000 	str.w	r3, [sl]
 8002d24:	89a3      	ldrh	r3, [r4, #12]
 8002d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d2a:	81a3      	strh	r3, [r4, #12]
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d34:	6921      	ldr	r1, [r4, #16]
 8002d36:	464a      	mov	r2, r9
 8002d38:	f000 fabe 	bl	80032b8 <memcpy>
 8002d3c:	89a3      	ldrh	r3, [r4, #12]
 8002d3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d46:	81a3      	strh	r3, [r4, #12]
 8002d48:	6126      	str	r6, [r4, #16]
 8002d4a:	6165      	str	r5, [r4, #20]
 8002d4c:	444e      	add	r6, r9
 8002d4e:	eba5 0509 	sub.w	r5, r5, r9
 8002d52:	6026      	str	r6, [r4, #0]
 8002d54:	60a5      	str	r5, [r4, #8]
 8002d56:	463e      	mov	r6, r7
 8002d58:	42be      	cmp	r6, r7
 8002d5a:	d900      	bls.n	8002d5e <__ssputs_r+0x86>
 8002d5c:	463e      	mov	r6, r7
 8002d5e:	6820      	ldr	r0, [r4, #0]
 8002d60:	4632      	mov	r2, r6
 8002d62:	4641      	mov	r1, r8
 8002d64:	f000 fab6 	bl	80032d4 <memmove>
 8002d68:	68a3      	ldr	r3, [r4, #8]
 8002d6a:	1b9b      	subs	r3, r3, r6
 8002d6c:	60a3      	str	r3, [r4, #8]
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	4433      	add	r3, r6
 8002d72:	6023      	str	r3, [r4, #0]
 8002d74:	2000      	movs	r0, #0
 8002d76:	e7db      	b.n	8002d30 <__ssputs_r+0x58>
 8002d78:	462a      	mov	r2, r5
 8002d7a:	f000 fba5 	bl	80034c8 <_realloc_r>
 8002d7e:	4606      	mov	r6, r0
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d1e1      	bne.n	8002d48 <__ssputs_r+0x70>
 8002d84:	6921      	ldr	r1, [r4, #16]
 8002d86:	4650      	mov	r0, sl
 8002d88:	f000 fabe 	bl	8003308 <_free_r>
 8002d8c:	e7c7      	b.n	8002d1e <__ssputs_r+0x46>
	...

08002d90 <_svfiprintf_r>:
 8002d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d94:	4698      	mov	r8, r3
 8002d96:	898b      	ldrh	r3, [r1, #12]
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	b09d      	sub	sp, #116	; 0x74
 8002d9c:	4607      	mov	r7, r0
 8002d9e:	460d      	mov	r5, r1
 8002da0:	4614      	mov	r4, r2
 8002da2:	d50e      	bpl.n	8002dc2 <_svfiprintf_r+0x32>
 8002da4:	690b      	ldr	r3, [r1, #16]
 8002da6:	b963      	cbnz	r3, 8002dc2 <_svfiprintf_r+0x32>
 8002da8:	2140      	movs	r1, #64	; 0x40
 8002daa:	f000 fb19 	bl	80033e0 <_malloc_r>
 8002dae:	6028      	str	r0, [r5, #0]
 8002db0:	6128      	str	r0, [r5, #16]
 8002db2:	b920      	cbnz	r0, 8002dbe <_svfiprintf_r+0x2e>
 8002db4:	230c      	movs	r3, #12
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	e0d1      	b.n	8002f62 <_svfiprintf_r+0x1d2>
 8002dbe:	2340      	movs	r3, #64	; 0x40
 8002dc0:	616b      	str	r3, [r5, #20]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dd0:	2330      	movs	r3, #48	; 0x30
 8002dd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002f7c <_svfiprintf_r+0x1ec>
 8002dd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dda:	f04f 0901 	mov.w	r9, #1
 8002dde:	4623      	mov	r3, r4
 8002de0:	469a      	mov	sl, r3
 8002de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002de6:	b10a      	cbz	r2, 8002dec <_svfiprintf_r+0x5c>
 8002de8:	2a25      	cmp	r2, #37	; 0x25
 8002dea:	d1f9      	bne.n	8002de0 <_svfiprintf_r+0x50>
 8002dec:	ebba 0b04 	subs.w	fp, sl, r4
 8002df0:	d00b      	beq.n	8002e0a <_svfiprintf_r+0x7a>
 8002df2:	465b      	mov	r3, fp
 8002df4:	4622      	mov	r2, r4
 8002df6:	4629      	mov	r1, r5
 8002df8:	4638      	mov	r0, r7
 8002dfa:	f7ff ff6d 	bl	8002cd8 <__ssputs_r>
 8002dfe:	3001      	adds	r0, #1
 8002e00:	f000 80aa 	beq.w	8002f58 <_svfiprintf_r+0x1c8>
 8002e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e06:	445a      	add	r2, fp
 8002e08:	9209      	str	r2, [sp, #36]	; 0x24
 8002e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80a2 	beq.w	8002f58 <_svfiprintf_r+0x1c8>
 8002e14:	2300      	movs	r3, #0
 8002e16:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e1e:	f10a 0a01 	add.w	sl, sl, #1
 8002e22:	9304      	str	r3, [sp, #16]
 8002e24:	9307      	str	r3, [sp, #28]
 8002e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8002e2c:	4654      	mov	r4, sl
 8002e2e:	2205      	movs	r2, #5
 8002e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e34:	4851      	ldr	r0, [pc, #324]	; (8002f7c <_svfiprintf_r+0x1ec>)
 8002e36:	f7fd f9db 	bl	80001f0 <memchr>
 8002e3a:	9a04      	ldr	r2, [sp, #16]
 8002e3c:	b9d8      	cbnz	r0, 8002e76 <_svfiprintf_r+0xe6>
 8002e3e:	06d0      	lsls	r0, r2, #27
 8002e40:	bf44      	itt	mi
 8002e42:	2320      	movmi	r3, #32
 8002e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e48:	0711      	lsls	r1, r2, #28
 8002e4a:	bf44      	itt	mi
 8002e4c:	232b      	movmi	r3, #43	; 0x2b
 8002e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e52:	f89a 3000 	ldrb.w	r3, [sl]
 8002e56:	2b2a      	cmp	r3, #42	; 0x2a
 8002e58:	d015      	beq.n	8002e86 <_svfiprintf_r+0xf6>
 8002e5a:	9a07      	ldr	r2, [sp, #28]
 8002e5c:	4654      	mov	r4, sl
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f04f 0c0a 	mov.w	ip, #10
 8002e64:	4621      	mov	r1, r4
 8002e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e6a:	3b30      	subs	r3, #48	; 0x30
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d94e      	bls.n	8002f0e <_svfiprintf_r+0x17e>
 8002e70:	b1b0      	cbz	r0, 8002ea0 <_svfiprintf_r+0x110>
 8002e72:	9207      	str	r2, [sp, #28]
 8002e74:	e014      	b.n	8002ea0 <_svfiprintf_r+0x110>
 8002e76:	eba0 0308 	sub.w	r3, r0, r8
 8002e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	9304      	str	r3, [sp, #16]
 8002e82:	46a2      	mov	sl, r4
 8002e84:	e7d2      	b.n	8002e2c <_svfiprintf_r+0x9c>
 8002e86:	9b03      	ldr	r3, [sp, #12]
 8002e88:	1d19      	adds	r1, r3, #4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	9103      	str	r1, [sp, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bfbb      	ittet	lt
 8002e92:	425b      	neglt	r3, r3
 8002e94:	f042 0202 	orrlt.w	r2, r2, #2
 8002e98:	9307      	strge	r3, [sp, #28]
 8002e9a:	9307      	strlt	r3, [sp, #28]
 8002e9c:	bfb8      	it	lt
 8002e9e:	9204      	strlt	r2, [sp, #16]
 8002ea0:	7823      	ldrb	r3, [r4, #0]
 8002ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8002ea4:	d10c      	bne.n	8002ec0 <_svfiprintf_r+0x130>
 8002ea6:	7863      	ldrb	r3, [r4, #1]
 8002ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8002eaa:	d135      	bne.n	8002f18 <_svfiprintf_r+0x188>
 8002eac:	9b03      	ldr	r3, [sp, #12]
 8002eae:	1d1a      	adds	r2, r3, #4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	9203      	str	r2, [sp, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bfb8      	it	lt
 8002eb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ebc:	3402      	adds	r4, #2
 8002ebe:	9305      	str	r3, [sp, #20]
 8002ec0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f8c <_svfiprintf_r+0x1fc>
 8002ec4:	7821      	ldrb	r1, [r4, #0]
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	4650      	mov	r0, sl
 8002eca:	f7fd f991 	bl	80001f0 <memchr>
 8002ece:	b140      	cbz	r0, 8002ee2 <_svfiprintf_r+0x152>
 8002ed0:	2340      	movs	r3, #64	; 0x40
 8002ed2:	eba0 000a 	sub.w	r0, r0, sl
 8002ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8002eda:	9b04      	ldr	r3, [sp, #16]
 8002edc:	4303      	orrs	r3, r0
 8002ede:	3401      	adds	r4, #1
 8002ee0:	9304      	str	r3, [sp, #16]
 8002ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ee6:	4826      	ldr	r0, [pc, #152]	; (8002f80 <_svfiprintf_r+0x1f0>)
 8002ee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eec:	2206      	movs	r2, #6
 8002eee:	f7fd f97f 	bl	80001f0 <memchr>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d038      	beq.n	8002f68 <_svfiprintf_r+0x1d8>
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <_svfiprintf_r+0x1f4>)
 8002ef8:	bb1b      	cbnz	r3, 8002f42 <_svfiprintf_r+0x1b2>
 8002efa:	9b03      	ldr	r3, [sp, #12]
 8002efc:	3307      	adds	r3, #7
 8002efe:	f023 0307 	bic.w	r3, r3, #7
 8002f02:	3308      	adds	r3, #8
 8002f04:	9303      	str	r3, [sp, #12]
 8002f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f08:	4433      	add	r3, r6
 8002f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f0c:	e767      	b.n	8002dde <_svfiprintf_r+0x4e>
 8002f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f12:	460c      	mov	r4, r1
 8002f14:	2001      	movs	r0, #1
 8002f16:	e7a5      	b.n	8002e64 <_svfiprintf_r+0xd4>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	3401      	adds	r4, #1
 8002f1c:	9305      	str	r3, [sp, #20]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f04f 0c0a 	mov.w	ip, #10
 8002f24:	4620      	mov	r0, r4
 8002f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f2a:	3a30      	subs	r2, #48	; 0x30
 8002f2c:	2a09      	cmp	r2, #9
 8002f2e:	d903      	bls.n	8002f38 <_svfiprintf_r+0x1a8>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0c5      	beq.n	8002ec0 <_svfiprintf_r+0x130>
 8002f34:	9105      	str	r1, [sp, #20]
 8002f36:	e7c3      	b.n	8002ec0 <_svfiprintf_r+0x130>
 8002f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e7f0      	b.n	8002f24 <_svfiprintf_r+0x194>
 8002f42:	ab03      	add	r3, sp, #12
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	462a      	mov	r2, r5
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <_svfiprintf_r+0x1f8>)
 8002f4a:	a904      	add	r1, sp, #16
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	f3af 8000 	nop.w
 8002f52:	1c42      	adds	r2, r0, #1
 8002f54:	4606      	mov	r6, r0
 8002f56:	d1d6      	bne.n	8002f06 <_svfiprintf_r+0x176>
 8002f58:	89ab      	ldrh	r3, [r5, #12]
 8002f5a:	065b      	lsls	r3, r3, #25
 8002f5c:	f53f af2c 	bmi.w	8002db8 <_svfiprintf_r+0x28>
 8002f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f62:	b01d      	add	sp, #116	; 0x74
 8002f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f68:	ab03      	add	r3, sp, #12
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	462a      	mov	r2, r5
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <_svfiprintf_r+0x1f8>)
 8002f70:	a904      	add	r1, sp, #16
 8002f72:	4638      	mov	r0, r7
 8002f74:	f000 f87a 	bl	800306c <_printf_i>
 8002f78:	e7eb      	b.n	8002f52 <_svfiprintf_r+0x1c2>
 8002f7a:	bf00      	nop
 8002f7c:	0800374c 	.word	0x0800374c
 8002f80:	08003756 	.word	0x08003756
 8002f84:	00000000 	.word	0x00000000
 8002f88:	08002cd9 	.word	0x08002cd9
 8002f8c:	08003752 	.word	0x08003752

08002f90 <_printf_common>:
 8002f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f94:	4616      	mov	r6, r2
 8002f96:	4699      	mov	r9, r3
 8002f98:	688a      	ldr	r2, [r1, #8]
 8002f9a:	690b      	ldr	r3, [r1, #16]
 8002f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bfb8      	it	lt
 8002fa4:	4613      	movlt	r3, r2
 8002fa6:	6033      	str	r3, [r6, #0]
 8002fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fac:	4607      	mov	r7, r0
 8002fae:	460c      	mov	r4, r1
 8002fb0:	b10a      	cbz	r2, 8002fb6 <_printf_common+0x26>
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	6033      	str	r3, [r6, #0]
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	0699      	lsls	r1, r3, #26
 8002fba:	bf42      	ittt	mi
 8002fbc:	6833      	ldrmi	r3, [r6, #0]
 8002fbe:	3302      	addmi	r3, #2
 8002fc0:	6033      	strmi	r3, [r6, #0]
 8002fc2:	6825      	ldr	r5, [r4, #0]
 8002fc4:	f015 0506 	ands.w	r5, r5, #6
 8002fc8:	d106      	bne.n	8002fd8 <_printf_common+0x48>
 8002fca:	f104 0a19 	add.w	sl, r4, #25
 8002fce:	68e3      	ldr	r3, [r4, #12]
 8002fd0:	6832      	ldr	r2, [r6, #0]
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	42ab      	cmp	r3, r5
 8002fd6:	dc26      	bgt.n	8003026 <_printf_common+0x96>
 8002fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fdc:	1e13      	subs	r3, r2, #0
 8002fde:	6822      	ldr	r2, [r4, #0]
 8002fe0:	bf18      	it	ne
 8002fe2:	2301      	movne	r3, #1
 8002fe4:	0692      	lsls	r2, r2, #26
 8002fe6:	d42b      	bmi.n	8003040 <_printf_common+0xb0>
 8002fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fec:	4649      	mov	r1, r9
 8002fee:	4638      	mov	r0, r7
 8002ff0:	47c0      	blx	r8
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	d01e      	beq.n	8003034 <_printf_common+0xa4>
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	68e5      	ldr	r5, [r4, #12]
 8002ffa:	6832      	ldr	r2, [r6, #0]
 8002ffc:	f003 0306 	and.w	r3, r3, #6
 8003000:	2b04      	cmp	r3, #4
 8003002:	bf08      	it	eq
 8003004:	1aad      	subeq	r5, r5, r2
 8003006:	68a3      	ldr	r3, [r4, #8]
 8003008:	6922      	ldr	r2, [r4, #16]
 800300a:	bf0c      	ite	eq
 800300c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003010:	2500      	movne	r5, #0
 8003012:	4293      	cmp	r3, r2
 8003014:	bfc4      	itt	gt
 8003016:	1a9b      	subgt	r3, r3, r2
 8003018:	18ed      	addgt	r5, r5, r3
 800301a:	2600      	movs	r6, #0
 800301c:	341a      	adds	r4, #26
 800301e:	42b5      	cmp	r5, r6
 8003020:	d11a      	bne.n	8003058 <_printf_common+0xc8>
 8003022:	2000      	movs	r0, #0
 8003024:	e008      	b.n	8003038 <_printf_common+0xa8>
 8003026:	2301      	movs	r3, #1
 8003028:	4652      	mov	r2, sl
 800302a:	4649      	mov	r1, r9
 800302c:	4638      	mov	r0, r7
 800302e:	47c0      	blx	r8
 8003030:	3001      	adds	r0, #1
 8003032:	d103      	bne.n	800303c <_printf_common+0xac>
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800303c:	3501      	adds	r5, #1
 800303e:	e7c6      	b.n	8002fce <_printf_common+0x3e>
 8003040:	18e1      	adds	r1, r4, r3
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	2030      	movs	r0, #48	; 0x30
 8003046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800304a:	4422      	add	r2, r4
 800304c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003054:	3302      	adds	r3, #2
 8003056:	e7c7      	b.n	8002fe8 <_printf_common+0x58>
 8003058:	2301      	movs	r3, #1
 800305a:	4622      	mov	r2, r4
 800305c:	4649      	mov	r1, r9
 800305e:	4638      	mov	r0, r7
 8003060:	47c0      	blx	r8
 8003062:	3001      	adds	r0, #1
 8003064:	d0e6      	beq.n	8003034 <_printf_common+0xa4>
 8003066:	3601      	adds	r6, #1
 8003068:	e7d9      	b.n	800301e <_printf_common+0x8e>
	...

0800306c <_printf_i>:
 800306c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003070:	7e0f      	ldrb	r7, [r1, #24]
 8003072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003074:	2f78      	cmp	r7, #120	; 0x78
 8003076:	4691      	mov	r9, r2
 8003078:	4680      	mov	r8, r0
 800307a:	460c      	mov	r4, r1
 800307c:	469a      	mov	sl, r3
 800307e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003082:	d807      	bhi.n	8003094 <_printf_i+0x28>
 8003084:	2f62      	cmp	r7, #98	; 0x62
 8003086:	d80a      	bhi.n	800309e <_printf_i+0x32>
 8003088:	2f00      	cmp	r7, #0
 800308a:	f000 80d8 	beq.w	800323e <_printf_i+0x1d2>
 800308e:	2f58      	cmp	r7, #88	; 0x58
 8003090:	f000 80a3 	beq.w	80031da <_printf_i+0x16e>
 8003094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800309c:	e03a      	b.n	8003114 <_printf_i+0xa8>
 800309e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030a2:	2b15      	cmp	r3, #21
 80030a4:	d8f6      	bhi.n	8003094 <_printf_i+0x28>
 80030a6:	a101      	add	r1, pc, #4	; (adr r1, 80030ac <_printf_i+0x40>)
 80030a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030ac:	08003105 	.word	0x08003105
 80030b0:	08003119 	.word	0x08003119
 80030b4:	08003095 	.word	0x08003095
 80030b8:	08003095 	.word	0x08003095
 80030bc:	08003095 	.word	0x08003095
 80030c0:	08003095 	.word	0x08003095
 80030c4:	08003119 	.word	0x08003119
 80030c8:	08003095 	.word	0x08003095
 80030cc:	08003095 	.word	0x08003095
 80030d0:	08003095 	.word	0x08003095
 80030d4:	08003095 	.word	0x08003095
 80030d8:	08003225 	.word	0x08003225
 80030dc:	08003149 	.word	0x08003149
 80030e0:	08003207 	.word	0x08003207
 80030e4:	08003095 	.word	0x08003095
 80030e8:	08003095 	.word	0x08003095
 80030ec:	08003247 	.word	0x08003247
 80030f0:	08003095 	.word	0x08003095
 80030f4:	08003149 	.word	0x08003149
 80030f8:	08003095 	.word	0x08003095
 80030fc:	08003095 	.word	0x08003095
 8003100:	0800320f 	.word	0x0800320f
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	1d1a      	adds	r2, r3, #4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	602a      	str	r2, [r5, #0]
 800310c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003114:	2301      	movs	r3, #1
 8003116:	e0a3      	b.n	8003260 <_printf_i+0x1f4>
 8003118:	6820      	ldr	r0, [r4, #0]
 800311a:	6829      	ldr	r1, [r5, #0]
 800311c:	0606      	lsls	r6, r0, #24
 800311e:	f101 0304 	add.w	r3, r1, #4
 8003122:	d50a      	bpl.n	800313a <_printf_i+0xce>
 8003124:	680e      	ldr	r6, [r1, #0]
 8003126:	602b      	str	r3, [r5, #0]
 8003128:	2e00      	cmp	r6, #0
 800312a:	da03      	bge.n	8003134 <_printf_i+0xc8>
 800312c:	232d      	movs	r3, #45	; 0x2d
 800312e:	4276      	negs	r6, r6
 8003130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003134:	485e      	ldr	r0, [pc, #376]	; (80032b0 <_printf_i+0x244>)
 8003136:	230a      	movs	r3, #10
 8003138:	e019      	b.n	800316e <_printf_i+0x102>
 800313a:	680e      	ldr	r6, [r1, #0]
 800313c:	602b      	str	r3, [r5, #0]
 800313e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003142:	bf18      	it	ne
 8003144:	b236      	sxthne	r6, r6
 8003146:	e7ef      	b.n	8003128 <_printf_i+0xbc>
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	6820      	ldr	r0, [r4, #0]
 800314c:	1d19      	adds	r1, r3, #4
 800314e:	6029      	str	r1, [r5, #0]
 8003150:	0601      	lsls	r1, r0, #24
 8003152:	d501      	bpl.n	8003158 <_printf_i+0xec>
 8003154:	681e      	ldr	r6, [r3, #0]
 8003156:	e002      	b.n	800315e <_printf_i+0xf2>
 8003158:	0646      	lsls	r6, r0, #25
 800315a:	d5fb      	bpl.n	8003154 <_printf_i+0xe8>
 800315c:	881e      	ldrh	r6, [r3, #0]
 800315e:	4854      	ldr	r0, [pc, #336]	; (80032b0 <_printf_i+0x244>)
 8003160:	2f6f      	cmp	r7, #111	; 0x6f
 8003162:	bf0c      	ite	eq
 8003164:	2308      	moveq	r3, #8
 8003166:	230a      	movne	r3, #10
 8003168:	2100      	movs	r1, #0
 800316a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800316e:	6865      	ldr	r5, [r4, #4]
 8003170:	60a5      	str	r5, [r4, #8]
 8003172:	2d00      	cmp	r5, #0
 8003174:	bfa2      	ittt	ge
 8003176:	6821      	ldrge	r1, [r4, #0]
 8003178:	f021 0104 	bicge.w	r1, r1, #4
 800317c:	6021      	strge	r1, [r4, #0]
 800317e:	b90e      	cbnz	r6, 8003184 <_printf_i+0x118>
 8003180:	2d00      	cmp	r5, #0
 8003182:	d04d      	beq.n	8003220 <_printf_i+0x1b4>
 8003184:	4615      	mov	r5, r2
 8003186:	fbb6 f1f3 	udiv	r1, r6, r3
 800318a:	fb03 6711 	mls	r7, r3, r1, r6
 800318e:	5dc7      	ldrb	r7, [r0, r7]
 8003190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003194:	4637      	mov	r7, r6
 8003196:	42bb      	cmp	r3, r7
 8003198:	460e      	mov	r6, r1
 800319a:	d9f4      	bls.n	8003186 <_printf_i+0x11a>
 800319c:	2b08      	cmp	r3, #8
 800319e:	d10b      	bne.n	80031b8 <_printf_i+0x14c>
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	07de      	lsls	r6, r3, #31
 80031a4:	d508      	bpl.n	80031b8 <_printf_i+0x14c>
 80031a6:	6923      	ldr	r3, [r4, #16]
 80031a8:	6861      	ldr	r1, [r4, #4]
 80031aa:	4299      	cmp	r1, r3
 80031ac:	bfde      	ittt	le
 80031ae:	2330      	movle	r3, #48	; 0x30
 80031b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031b8:	1b52      	subs	r2, r2, r5
 80031ba:	6122      	str	r2, [r4, #16]
 80031bc:	f8cd a000 	str.w	sl, [sp]
 80031c0:	464b      	mov	r3, r9
 80031c2:	aa03      	add	r2, sp, #12
 80031c4:	4621      	mov	r1, r4
 80031c6:	4640      	mov	r0, r8
 80031c8:	f7ff fee2 	bl	8002f90 <_printf_common>
 80031cc:	3001      	adds	r0, #1
 80031ce:	d14c      	bne.n	800326a <_printf_i+0x1fe>
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	b004      	add	sp, #16
 80031d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031da:	4835      	ldr	r0, [pc, #212]	; (80032b0 <_printf_i+0x244>)
 80031dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80031e0:	6829      	ldr	r1, [r5, #0]
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80031e8:	6029      	str	r1, [r5, #0]
 80031ea:	061d      	lsls	r5, r3, #24
 80031ec:	d514      	bpl.n	8003218 <_printf_i+0x1ac>
 80031ee:	07df      	lsls	r7, r3, #31
 80031f0:	bf44      	itt	mi
 80031f2:	f043 0320 	orrmi.w	r3, r3, #32
 80031f6:	6023      	strmi	r3, [r4, #0]
 80031f8:	b91e      	cbnz	r6, 8003202 <_printf_i+0x196>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	f023 0320 	bic.w	r3, r3, #32
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	2310      	movs	r3, #16
 8003204:	e7b0      	b.n	8003168 <_printf_i+0xfc>
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	f043 0320 	orr.w	r3, r3, #32
 800320c:	6023      	str	r3, [r4, #0]
 800320e:	2378      	movs	r3, #120	; 0x78
 8003210:	4828      	ldr	r0, [pc, #160]	; (80032b4 <_printf_i+0x248>)
 8003212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003216:	e7e3      	b.n	80031e0 <_printf_i+0x174>
 8003218:	0659      	lsls	r1, r3, #25
 800321a:	bf48      	it	mi
 800321c:	b2b6      	uxthmi	r6, r6
 800321e:	e7e6      	b.n	80031ee <_printf_i+0x182>
 8003220:	4615      	mov	r5, r2
 8003222:	e7bb      	b.n	800319c <_printf_i+0x130>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	6826      	ldr	r6, [r4, #0]
 8003228:	6961      	ldr	r1, [r4, #20]
 800322a:	1d18      	adds	r0, r3, #4
 800322c:	6028      	str	r0, [r5, #0]
 800322e:	0635      	lsls	r5, r6, #24
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	d501      	bpl.n	8003238 <_printf_i+0x1cc>
 8003234:	6019      	str	r1, [r3, #0]
 8003236:	e002      	b.n	800323e <_printf_i+0x1d2>
 8003238:	0670      	lsls	r0, r6, #25
 800323a:	d5fb      	bpl.n	8003234 <_printf_i+0x1c8>
 800323c:	8019      	strh	r1, [r3, #0]
 800323e:	2300      	movs	r3, #0
 8003240:	6123      	str	r3, [r4, #16]
 8003242:	4615      	mov	r5, r2
 8003244:	e7ba      	b.n	80031bc <_printf_i+0x150>
 8003246:	682b      	ldr	r3, [r5, #0]
 8003248:	1d1a      	adds	r2, r3, #4
 800324a:	602a      	str	r2, [r5, #0]
 800324c:	681d      	ldr	r5, [r3, #0]
 800324e:	6862      	ldr	r2, [r4, #4]
 8003250:	2100      	movs	r1, #0
 8003252:	4628      	mov	r0, r5
 8003254:	f7fc ffcc 	bl	80001f0 <memchr>
 8003258:	b108      	cbz	r0, 800325e <_printf_i+0x1f2>
 800325a:	1b40      	subs	r0, r0, r5
 800325c:	6060      	str	r0, [r4, #4]
 800325e:	6863      	ldr	r3, [r4, #4]
 8003260:	6123      	str	r3, [r4, #16]
 8003262:	2300      	movs	r3, #0
 8003264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003268:	e7a8      	b.n	80031bc <_printf_i+0x150>
 800326a:	6923      	ldr	r3, [r4, #16]
 800326c:	462a      	mov	r2, r5
 800326e:	4649      	mov	r1, r9
 8003270:	4640      	mov	r0, r8
 8003272:	47d0      	blx	sl
 8003274:	3001      	adds	r0, #1
 8003276:	d0ab      	beq.n	80031d0 <_printf_i+0x164>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	079b      	lsls	r3, r3, #30
 800327c:	d413      	bmi.n	80032a6 <_printf_i+0x23a>
 800327e:	68e0      	ldr	r0, [r4, #12]
 8003280:	9b03      	ldr	r3, [sp, #12]
 8003282:	4298      	cmp	r0, r3
 8003284:	bfb8      	it	lt
 8003286:	4618      	movlt	r0, r3
 8003288:	e7a4      	b.n	80031d4 <_printf_i+0x168>
 800328a:	2301      	movs	r3, #1
 800328c:	4632      	mov	r2, r6
 800328e:	4649      	mov	r1, r9
 8003290:	4640      	mov	r0, r8
 8003292:	47d0      	blx	sl
 8003294:	3001      	adds	r0, #1
 8003296:	d09b      	beq.n	80031d0 <_printf_i+0x164>
 8003298:	3501      	adds	r5, #1
 800329a:	68e3      	ldr	r3, [r4, #12]
 800329c:	9903      	ldr	r1, [sp, #12]
 800329e:	1a5b      	subs	r3, r3, r1
 80032a0:	42ab      	cmp	r3, r5
 80032a2:	dcf2      	bgt.n	800328a <_printf_i+0x21e>
 80032a4:	e7eb      	b.n	800327e <_printf_i+0x212>
 80032a6:	2500      	movs	r5, #0
 80032a8:	f104 0619 	add.w	r6, r4, #25
 80032ac:	e7f5      	b.n	800329a <_printf_i+0x22e>
 80032ae:	bf00      	nop
 80032b0:	0800375d 	.word	0x0800375d
 80032b4:	0800376e 	.word	0x0800376e

080032b8 <memcpy>:
 80032b8:	440a      	add	r2, r1
 80032ba:	4291      	cmp	r1, r2
 80032bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80032c0:	d100      	bne.n	80032c4 <memcpy+0xc>
 80032c2:	4770      	bx	lr
 80032c4:	b510      	push	{r4, lr}
 80032c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032ce:	4291      	cmp	r1, r2
 80032d0:	d1f9      	bne.n	80032c6 <memcpy+0xe>
 80032d2:	bd10      	pop	{r4, pc}

080032d4 <memmove>:
 80032d4:	4288      	cmp	r0, r1
 80032d6:	b510      	push	{r4, lr}
 80032d8:	eb01 0402 	add.w	r4, r1, r2
 80032dc:	d902      	bls.n	80032e4 <memmove+0x10>
 80032de:	4284      	cmp	r4, r0
 80032e0:	4623      	mov	r3, r4
 80032e2:	d807      	bhi.n	80032f4 <memmove+0x20>
 80032e4:	1e43      	subs	r3, r0, #1
 80032e6:	42a1      	cmp	r1, r4
 80032e8:	d008      	beq.n	80032fc <memmove+0x28>
 80032ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032f2:	e7f8      	b.n	80032e6 <memmove+0x12>
 80032f4:	4402      	add	r2, r0
 80032f6:	4601      	mov	r1, r0
 80032f8:	428a      	cmp	r2, r1
 80032fa:	d100      	bne.n	80032fe <memmove+0x2a>
 80032fc:	bd10      	pop	{r4, pc}
 80032fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003306:	e7f7      	b.n	80032f8 <memmove+0x24>

08003308 <_free_r>:
 8003308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800330a:	2900      	cmp	r1, #0
 800330c:	d044      	beq.n	8003398 <_free_r+0x90>
 800330e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003312:	9001      	str	r0, [sp, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f1a1 0404 	sub.w	r4, r1, #4
 800331a:	bfb8      	it	lt
 800331c:	18e4      	addlt	r4, r4, r3
 800331e:	f000 f913 	bl	8003548 <__malloc_lock>
 8003322:	4a1e      	ldr	r2, [pc, #120]	; (800339c <_free_r+0x94>)
 8003324:	9801      	ldr	r0, [sp, #4]
 8003326:	6813      	ldr	r3, [r2, #0]
 8003328:	b933      	cbnz	r3, 8003338 <_free_r+0x30>
 800332a:	6063      	str	r3, [r4, #4]
 800332c:	6014      	str	r4, [r2, #0]
 800332e:	b003      	add	sp, #12
 8003330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003334:	f000 b90e 	b.w	8003554 <__malloc_unlock>
 8003338:	42a3      	cmp	r3, r4
 800333a:	d908      	bls.n	800334e <_free_r+0x46>
 800333c:	6825      	ldr	r5, [r4, #0]
 800333e:	1961      	adds	r1, r4, r5
 8003340:	428b      	cmp	r3, r1
 8003342:	bf01      	itttt	eq
 8003344:	6819      	ldreq	r1, [r3, #0]
 8003346:	685b      	ldreq	r3, [r3, #4]
 8003348:	1949      	addeq	r1, r1, r5
 800334a:	6021      	streq	r1, [r4, #0]
 800334c:	e7ed      	b.n	800332a <_free_r+0x22>
 800334e:	461a      	mov	r2, r3
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	b10b      	cbz	r3, 8003358 <_free_r+0x50>
 8003354:	42a3      	cmp	r3, r4
 8003356:	d9fa      	bls.n	800334e <_free_r+0x46>
 8003358:	6811      	ldr	r1, [r2, #0]
 800335a:	1855      	adds	r5, r2, r1
 800335c:	42a5      	cmp	r5, r4
 800335e:	d10b      	bne.n	8003378 <_free_r+0x70>
 8003360:	6824      	ldr	r4, [r4, #0]
 8003362:	4421      	add	r1, r4
 8003364:	1854      	adds	r4, r2, r1
 8003366:	42a3      	cmp	r3, r4
 8003368:	6011      	str	r1, [r2, #0]
 800336a:	d1e0      	bne.n	800332e <_free_r+0x26>
 800336c:	681c      	ldr	r4, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	6053      	str	r3, [r2, #4]
 8003372:	4421      	add	r1, r4
 8003374:	6011      	str	r1, [r2, #0]
 8003376:	e7da      	b.n	800332e <_free_r+0x26>
 8003378:	d902      	bls.n	8003380 <_free_r+0x78>
 800337a:	230c      	movs	r3, #12
 800337c:	6003      	str	r3, [r0, #0]
 800337e:	e7d6      	b.n	800332e <_free_r+0x26>
 8003380:	6825      	ldr	r5, [r4, #0]
 8003382:	1961      	adds	r1, r4, r5
 8003384:	428b      	cmp	r3, r1
 8003386:	bf04      	itt	eq
 8003388:	6819      	ldreq	r1, [r3, #0]
 800338a:	685b      	ldreq	r3, [r3, #4]
 800338c:	6063      	str	r3, [r4, #4]
 800338e:	bf04      	itt	eq
 8003390:	1949      	addeq	r1, r1, r5
 8003392:	6021      	streq	r1, [r4, #0]
 8003394:	6054      	str	r4, [r2, #4]
 8003396:	e7ca      	b.n	800332e <_free_r+0x26>
 8003398:	b003      	add	sp, #12
 800339a:	bd30      	pop	{r4, r5, pc}
 800339c:	20000278 	.word	0x20000278

080033a0 <sbrk_aligned>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	4e0e      	ldr	r6, [pc, #56]	; (80033dc <sbrk_aligned+0x3c>)
 80033a4:	460c      	mov	r4, r1
 80033a6:	6831      	ldr	r1, [r6, #0]
 80033a8:	4605      	mov	r5, r0
 80033aa:	b911      	cbnz	r1, 80033b2 <sbrk_aligned+0x12>
 80033ac:	f000 f8bc 	bl	8003528 <_sbrk_r>
 80033b0:	6030      	str	r0, [r6, #0]
 80033b2:	4621      	mov	r1, r4
 80033b4:	4628      	mov	r0, r5
 80033b6:	f000 f8b7 	bl	8003528 <_sbrk_r>
 80033ba:	1c43      	adds	r3, r0, #1
 80033bc:	d00a      	beq.n	80033d4 <sbrk_aligned+0x34>
 80033be:	1cc4      	adds	r4, r0, #3
 80033c0:	f024 0403 	bic.w	r4, r4, #3
 80033c4:	42a0      	cmp	r0, r4
 80033c6:	d007      	beq.n	80033d8 <sbrk_aligned+0x38>
 80033c8:	1a21      	subs	r1, r4, r0
 80033ca:	4628      	mov	r0, r5
 80033cc:	f000 f8ac 	bl	8003528 <_sbrk_r>
 80033d0:	3001      	adds	r0, #1
 80033d2:	d101      	bne.n	80033d8 <sbrk_aligned+0x38>
 80033d4:	f04f 34ff 	mov.w	r4, #4294967295
 80033d8:	4620      	mov	r0, r4
 80033da:	bd70      	pop	{r4, r5, r6, pc}
 80033dc:	2000027c 	.word	0x2000027c

080033e0 <_malloc_r>:
 80033e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033e4:	1ccd      	adds	r5, r1, #3
 80033e6:	f025 0503 	bic.w	r5, r5, #3
 80033ea:	3508      	adds	r5, #8
 80033ec:	2d0c      	cmp	r5, #12
 80033ee:	bf38      	it	cc
 80033f0:	250c      	movcc	r5, #12
 80033f2:	2d00      	cmp	r5, #0
 80033f4:	4607      	mov	r7, r0
 80033f6:	db01      	blt.n	80033fc <_malloc_r+0x1c>
 80033f8:	42a9      	cmp	r1, r5
 80033fa:	d905      	bls.n	8003408 <_malloc_r+0x28>
 80033fc:	230c      	movs	r3, #12
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	2600      	movs	r6, #0
 8003402:	4630      	mov	r0, r6
 8003404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003408:	4e2e      	ldr	r6, [pc, #184]	; (80034c4 <_malloc_r+0xe4>)
 800340a:	f000 f89d 	bl	8003548 <__malloc_lock>
 800340e:	6833      	ldr	r3, [r6, #0]
 8003410:	461c      	mov	r4, r3
 8003412:	bb34      	cbnz	r4, 8003462 <_malloc_r+0x82>
 8003414:	4629      	mov	r1, r5
 8003416:	4638      	mov	r0, r7
 8003418:	f7ff ffc2 	bl	80033a0 <sbrk_aligned>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	4604      	mov	r4, r0
 8003420:	d14d      	bne.n	80034be <_malloc_r+0xde>
 8003422:	6834      	ldr	r4, [r6, #0]
 8003424:	4626      	mov	r6, r4
 8003426:	2e00      	cmp	r6, #0
 8003428:	d140      	bne.n	80034ac <_malloc_r+0xcc>
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	4631      	mov	r1, r6
 800342e:	4638      	mov	r0, r7
 8003430:	eb04 0803 	add.w	r8, r4, r3
 8003434:	f000 f878 	bl	8003528 <_sbrk_r>
 8003438:	4580      	cmp	r8, r0
 800343a:	d13a      	bne.n	80034b2 <_malloc_r+0xd2>
 800343c:	6821      	ldr	r1, [r4, #0]
 800343e:	3503      	adds	r5, #3
 8003440:	1a6d      	subs	r5, r5, r1
 8003442:	f025 0503 	bic.w	r5, r5, #3
 8003446:	3508      	adds	r5, #8
 8003448:	2d0c      	cmp	r5, #12
 800344a:	bf38      	it	cc
 800344c:	250c      	movcc	r5, #12
 800344e:	4629      	mov	r1, r5
 8003450:	4638      	mov	r0, r7
 8003452:	f7ff ffa5 	bl	80033a0 <sbrk_aligned>
 8003456:	3001      	adds	r0, #1
 8003458:	d02b      	beq.n	80034b2 <_malloc_r+0xd2>
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	442b      	add	r3, r5
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	e00e      	b.n	8003480 <_malloc_r+0xa0>
 8003462:	6822      	ldr	r2, [r4, #0]
 8003464:	1b52      	subs	r2, r2, r5
 8003466:	d41e      	bmi.n	80034a6 <_malloc_r+0xc6>
 8003468:	2a0b      	cmp	r2, #11
 800346a:	d916      	bls.n	800349a <_malloc_r+0xba>
 800346c:	1961      	adds	r1, r4, r5
 800346e:	42a3      	cmp	r3, r4
 8003470:	6025      	str	r5, [r4, #0]
 8003472:	bf18      	it	ne
 8003474:	6059      	strne	r1, [r3, #4]
 8003476:	6863      	ldr	r3, [r4, #4]
 8003478:	bf08      	it	eq
 800347a:	6031      	streq	r1, [r6, #0]
 800347c:	5162      	str	r2, [r4, r5]
 800347e:	604b      	str	r3, [r1, #4]
 8003480:	4638      	mov	r0, r7
 8003482:	f104 060b 	add.w	r6, r4, #11
 8003486:	f000 f865 	bl	8003554 <__malloc_unlock>
 800348a:	f026 0607 	bic.w	r6, r6, #7
 800348e:	1d23      	adds	r3, r4, #4
 8003490:	1af2      	subs	r2, r6, r3
 8003492:	d0b6      	beq.n	8003402 <_malloc_r+0x22>
 8003494:	1b9b      	subs	r3, r3, r6
 8003496:	50a3      	str	r3, [r4, r2]
 8003498:	e7b3      	b.n	8003402 <_malloc_r+0x22>
 800349a:	6862      	ldr	r2, [r4, #4]
 800349c:	42a3      	cmp	r3, r4
 800349e:	bf0c      	ite	eq
 80034a0:	6032      	streq	r2, [r6, #0]
 80034a2:	605a      	strne	r2, [r3, #4]
 80034a4:	e7ec      	b.n	8003480 <_malloc_r+0xa0>
 80034a6:	4623      	mov	r3, r4
 80034a8:	6864      	ldr	r4, [r4, #4]
 80034aa:	e7b2      	b.n	8003412 <_malloc_r+0x32>
 80034ac:	4634      	mov	r4, r6
 80034ae:	6876      	ldr	r6, [r6, #4]
 80034b0:	e7b9      	b.n	8003426 <_malloc_r+0x46>
 80034b2:	230c      	movs	r3, #12
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4638      	mov	r0, r7
 80034b8:	f000 f84c 	bl	8003554 <__malloc_unlock>
 80034bc:	e7a1      	b.n	8003402 <_malloc_r+0x22>
 80034be:	6025      	str	r5, [r4, #0]
 80034c0:	e7de      	b.n	8003480 <_malloc_r+0xa0>
 80034c2:	bf00      	nop
 80034c4:	20000278 	.word	0x20000278

080034c8 <_realloc_r>:
 80034c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034cc:	4680      	mov	r8, r0
 80034ce:	4614      	mov	r4, r2
 80034d0:	460e      	mov	r6, r1
 80034d2:	b921      	cbnz	r1, 80034de <_realloc_r+0x16>
 80034d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034d8:	4611      	mov	r1, r2
 80034da:	f7ff bf81 	b.w	80033e0 <_malloc_r>
 80034de:	b92a      	cbnz	r2, 80034ec <_realloc_r+0x24>
 80034e0:	f7ff ff12 	bl	8003308 <_free_r>
 80034e4:	4625      	mov	r5, r4
 80034e6:	4628      	mov	r0, r5
 80034e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ec:	f000 f838 	bl	8003560 <_malloc_usable_size_r>
 80034f0:	4284      	cmp	r4, r0
 80034f2:	4607      	mov	r7, r0
 80034f4:	d802      	bhi.n	80034fc <_realloc_r+0x34>
 80034f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034fa:	d812      	bhi.n	8003522 <_realloc_r+0x5a>
 80034fc:	4621      	mov	r1, r4
 80034fe:	4640      	mov	r0, r8
 8003500:	f7ff ff6e 	bl	80033e0 <_malloc_r>
 8003504:	4605      	mov	r5, r0
 8003506:	2800      	cmp	r0, #0
 8003508:	d0ed      	beq.n	80034e6 <_realloc_r+0x1e>
 800350a:	42bc      	cmp	r4, r7
 800350c:	4622      	mov	r2, r4
 800350e:	4631      	mov	r1, r6
 8003510:	bf28      	it	cs
 8003512:	463a      	movcs	r2, r7
 8003514:	f7ff fed0 	bl	80032b8 <memcpy>
 8003518:	4631      	mov	r1, r6
 800351a:	4640      	mov	r0, r8
 800351c:	f7ff fef4 	bl	8003308 <_free_r>
 8003520:	e7e1      	b.n	80034e6 <_realloc_r+0x1e>
 8003522:	4635      	mov	r5, r6
 8003524:	e7df      	b.n	80034e6 <_realloc_r+0x1e>
	...

08003528 <_sbrk_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4d06      	ldr	r5, [pc, #24]	; (8003544 <_sbrk_r+0x1c>)
 800352c:	2300      	movs	r3, #0
 800352e:	4604      	mov	r4, r0
 8003530:	4608      	mov	r0, r1
 8003532:	602b      	str	r3, [r5, #0]
 8003534:	f7fd fa36 	bl	80009a4 <_sbrk>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d102      	bne.n	8003542 <_sbrk_r+0x1a>
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	b103      	cbz	r3, 8003542 <_sbrk_r+0x1a>
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	bd38      	pop	{r3, r4, r5, pc}
 8003544:	20000280 	.word	0x20000280

08003548 <__malloc_lock>:
 8003548:	4801      	ldr	r0, [pc, #4]	; (8003550 <__malloc_lock+0x8>)
 800354a:	f000 b811 	b.w	8003570 <__retarget_lock_acquire_recursive>
 800354e:	bf00      	nop
 8003550:	20000284 	.word	0x20000284

08003554 <__malloc_unlock>:
 8003554:	4801      	ldr	r0, [pc, #4]	; (800355c <__malloc_unlock+0x8>)
 8003556:	f000 b80c 	b.w	8003572 <__retarget_lock_release_recursive>
 800355a:	bf00      	nop
 800355c:	20000284 	.word	0x20000284

08003560 <_malloc_usable_size_r>:
 8003560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003564:	1f18      	subs	r0, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	bfbc      	itt	lt
 800356a:	580b      	ldrlt	r3, [r1, r0]
 800356c:	18c0      	addlt	r0, r0, r3
 800356e:	4770      	bx	lr

08003570 <__retarget_lock_acquire_recursive>:
 8003570:	4770      	bx	lr

08003572 <__retarget_lock_release_recursive>:
 8003572:	4770      	bx	lr

08003574 <_init>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr

08003580 <_fini>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr
